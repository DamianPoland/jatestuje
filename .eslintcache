[{"D:\\JS\\_projects\\jatestuje\\src\\index.js":"1","D:\\JS\\_projects\\jatestuje\\src\\reportWebVitals.js":"2","D:\\JS\\_projects\\jatestuje\\src\\containers\\App\\App.js":"3","D:\\JS\\_projects\\jatestuje\\src\\shared\\constans.js":"4","D:\\JS\\_projects\\jatestuje\\src\\shared\\data.js":"5","D:\\JS\\_projects\\jatestuje\\src\\shared\\fire.js":"6","D:\\JS\\_projects\\jatestuje\\src\\components\\User\\User.js":"7","D:\\JS\\_projects\\jatestuje\\src\\components\\UserAds\\UserAds.js":"8","D:\\JS\\_projects\\jatestuje\\src\\components\\Home\\Home.js":"9","D:\\JS\\_projects\\jatestuje\\src\\components\\Ad\\Ad.js":"10","D:\\JS\\_projects\\jatestuje\\src\\components\\Nav\\Nav.js":"11","D:\\JS\\_projects\\jatestuje\\src\\UI\\AlertPrivacy\\AlertPrivacy.js":"12","D:\\JS\\_projects\\jatestuje\\src\\components\\Regulations\\Regulations.js":"13","D:\\JS\\_projects\\jatestuje\\src\\components\\Contact\\Contact.js":"14","D:\\JS\\_projects\\jatestuje\\src\\components\\PrivacyPolicy\\PrivacyPolicy.js":"15","D:\\JS\\_projects\\jatestuje\\src\\components\\Footer\\Footer.js":"16","D:\\JS\\_projects\\jatestuje\\src\\components\\User\\LoginRegisterFirebaseUI\\LoginRegisterFirebaseUI.js":"17","D:\\JS\\_projects\\jatestuje\\src\\UI\\AlertSmall\\AlertSmall.js":"18","D:\\JS\\_projects\\jatestuje\\src\\components\\ListItemAd\\ListItemAd.js":"19","D:\\JS\\_projects\\jatestuje\\src\\UI\\Alert\\Alert.js":"20","D:\\JS\\_projects\\jatestuje\\src\\UI\\Spinner\\Spinner.js":"21"},{"size":515,"mtime":1611559356968,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"23"},{"size":4115,"mtime":1614620180606,"results":"25","hashOfConfig":"23"},{"size":331,"mtime":1613740087006,"results":"26","hashOfConfig":"23"},{"size":86373,"mtime":1614620517538,"results":"27","hashOfConfig":"23"},{"size":1248,"mtime":1614374738263,"results":"28","hashOfConfig":"23"},{"size":69314,"mtime":1614590877240,"results":"29","hashOfConfig":"23"},{"size":4140,"mtime":1614375624493,"results":"30","hashOfConfig":"23"},{"size":16269,"mtime":1614620201566,"results":"31","hashOfConfig":"23"},{"size":13993,"mtime":1614416582261,"results":"32","hashOfConfig":"23"},{"size":2597,"mtime":1614349966317,"results":"33","hashOfConfig":"23"},{"size":1400,"mtime":1605265466971,"results":"34","hashOfConfig":"23"},{"size":334,"mtime":1613045561712,"results":"35","hashOfConfig":"23"},{"size":9448,"mtime":1613987847975,"results":"36","hashOfConfig":"23"},{"size":13579,"mtime":1611739019188,"results":"37","hashOfConfig":"23"},{"size":2180,"mtime":1613045448479,"results":"38","hashOfConfig":"23"},{"size":2854,"mtime":1614158601270,"results":"39","hashOfConfig":"23"},{"size":2429,"mtime":1606299266075,"results":"40","hashOfConfig":"23"},{"size":1567,"mtime":1614368358625,"results":"41","hashOfConfig":"23"},{"size":2122,"mtime":1603695166114,"results":"42","hashOfConfig":"23"},{"size":346,"mtime":1599650450834,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1mkrx2d",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"D:\\JS\\_projects\\jatestuje\\src\\index.js",[],["88","89"],"D:\\JS\\_projects\\jatestuje\\src\\reportWebVitals.js",[],"D:\\JS\\_projects\\jatestuje\\src\\containers\\App\\App.js",[],"D:\\JS\\_projects\\jatestuje\\src\\shared\\constans.js",[],"D:\\JS\\_projects\\jatestuje\\src\\shared\\data.js",[],"D:\\JS\\_projects\\jatestuje\\src\\shared\\fire.js",[],"D:\\JS\\_projects\\jatestuje\\src\\components\\User\\User.js",["90"],"import React, { useState, useEffect } from 'react'\r\nimport style from './User.module.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n// image compression library\r\nimport imageCompression from 'browser-image-compression';\r\n\r\n//components\r\nimport LoginRegisterFirebaseUI from './LoginRegisterFirebaseUI/LoginRegisterFirebaseUI'\r\nimport { ReactComponent as Ad } from '../../assets/ad.svg'\r\nimport AlertSmall from \"../../UI/AlertSmall/AlertSmall\"\r\nimport Spinner from '../../UI/Spinner/Spinner'\r\n\r\n//data \r\nimport { mainCategories, fuel, yearsWithEmptyEl, gearbox, carEquipment, mileage, regions, cities, knowledge } from '../../shared/data'\r\n\r\n//photos\r\nimport Photo from '../../assets/photo.png'\r\nimport PhotoEmpty from '../../assets/photoEmpty.png'\r\n\r\n//firebase\r\nimport { auth, firestore, storage, functions } from '../../shared/fire'\r\n\r\n// constans\r\nimport { UID, ADS, USERS, ADD_AD, EDIT_AD, REFRESH_AD } from '../../shared/constans'\r\n\r\n\r\n\r\n// delete all images and folder from DB\r\nconst deleteImagesAndFolderFromDB = (isAdingItem) => {\r\n    const ref = storage.ref(`images/${localStorage.getItem(UID)}/${isAdingItem}`)\r\n    ref.listAll()\r\n        .then(resp => {\r\n            resp.items.forEach(fileRef => {\r\n                storage.ref(fileRef.fullPath).getDownloadURL()\r\n                    .then(url => {\r\n                        storage.refFromURL(url).delete()\r\n                            .then(() => console.log(\"deleted ad from storage\"))\r\n                            .catch(error => console.log(\"error deletion, error: \", error))\r\n                    })\r\n            })\r\n        })\r\n        .catch(error => console.log(error))\r\n}\r\n\r\n\r\n//days text converter\r\nconst dayTextConverter = (timeValidationDate) => {\r\n    const dateDifference = Math.ceil((timeValidationDate - new Date().getTime()) / 86400000)\r\n    if (dateDifference > 1) { return ` ${dateDifference} dni.` }\r\n    else if (dateDifference === 1) { return ` 1 dzień.` }\r\n    //else { return ` mniej niż jeden dzień.` }\r\n}\r\n\r\n// equipment array\r\nlet equipmentChosen = []\r\n\r\n\r\nconst User = ({ userAds, setUserAds }) => {\r\n\r\n\r\n    // show or hide small alert\r\n    const [isAlertSmallShow, setIsAlertSmallShow] = useState(false)\r\n\r\n    // Spinner\r\n    const [isMainSpinnerShow, setIsMainSpinnerShow] = useState(false)\r\n\r\n\r\n    // ----------------------- START USER VIEW  --------------------------//\r\n\r\n\r\n    // get user ads when start comopnent\r\n    useEffect(() => {\r\n\r\n        // start query if userAds is empty\r\n        if (userAds.length === 0) {\r\n\r\n            // get user ads and show main spinner\r\n            getUserAds()\r\n            setIsMainSpinnerShow(true)\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    // get user ads\r\n    const getUserAds = () => {\r\n\r\n        // if user is not sign in then not get user ads\r\n        if (!localStorage.getItem(UID)) { return }\r\n\r\n        // get document with user ads\r\n        firestore.collection(USERS).doc(localStorage.getItem(UID)).collection(ADS).doc(ADS).get()\r\n            .then(resp => {\r\n\r\n                // if no data then stop\r\n                if (!resp.data()) {\r\n                    setIsMainSpinnerShow(false)\r\n                    return\r\n                }\r\n\r\n                // change object to array\r\n                const dataArray = Object.values(resp.data()).sort().reverse()\r\n\r\n                // if empty data then stop\r\n                if (dataArray.length === 0) {\r\n                    setIsMainSpinnerShow(false)\r\n                    return\r\n                }\r\n\r\n                // get ads from collections\r\n                dataArray.forEach(item => {\r\n\r\n                    //get collection name as main category\r\n                    const collectionName = item.split(\" \")[0]\r\n\r\n                    // get ad with itemID from DB and save in State\r\n                    firestore.collection(collectionName).doc(item).get()\r\n                        .then(resp => {\r\n\r\n                            // if response is not undefined\r\n                            resp.data() && setUserAds(prevState => [...prevState, resp.data()])\r\n\r\n                            //item.adData.mainCategory\r\n                        })\r\n                        .catch(err => {\r\n\r\n                            // show alert Error\r\n                            setIsAlertSmallShow({ alertIcon: 'error', description: 'Błąd. Spróbuj ponownie później.', animationTime: '2', borderColor: 'red' })\r\n                            console.log('get ad err', err)\r\n\r\n                            // hide main spinner\r\n                            setIsMainSpinnerShow(false)\r\n                        })\r\n                        .finally(() => {\r\n\r\n                            // when is last item then turn of spinner\r\n                            if (item === dataArray[dataArray.length - 1]) {\r\n\r\n                                // hide main spinner\r\n                                setIsMainSpinnerShow(false)\r\n                            }\r\n                        })\r\n                })\r\n            })\r\n            .catch(err => {\r\n\r\n                // show alert Error\r\n                setIsAlertSmallShow({ alertIcon: 'error', description: 'Błąd. Spróbuj ponownie później.', animationTime: '2', borderColor: 'red' })\r\n                console.log(\"get document err: \", err)\r\n\r\n                // hide main spinner\r\n                setIsMainSpinnerShow(false)\r\n            })\r\n\r\n\r\n    }\r\n\r\n    // ----------------------- STOP USER VIEW  --------------------------//\r\n\r\n\r\n\r\n\r\n\r\n    // ----------------------- START ADD ITEM --------------------------//\r\n\r\n\r\n    // STATE - is Adding Item possibiliteies: false, ADD_AD, EDIT_AD, REFRESH_AD\r\n    const [isAddingItem, setIsAddingItem] = useState(false)\r\n\r\n    // STATE - set ad Id, generate before start form and when main category change\r\n    const [id, setId] = useState(\"\")\r\n\r\n    // STATE - set mainCategory of ad, auto fill when category change\r\n    const [mainCategory, setMainCategory] = useState(mainCategories[0].nameDB)\r\n\r\n    // STATE - set type\r\n    const [typeChosen, setTypeChosen] = useState(\"\")\r\n    const [typeChosenValidation, setTypeChosenValidation] = useState(\"\")\r\n\r\n    // STATE - set year from\r\n    const [yearChosen, setYearChosen] = useState(\"\")\r\n    const [yearChosenValidation, setYearChosenValidation] = useState(\"\")\r\n\r\n    // STATE - input Title\r\n    const [adTitle, setAdTitle] = useState('') // input value\r\n    const [adTitleValidation, setAdTitleValidation] = useState(0) // input value\r\n\r\n    // STATE - input Image\r\n    const [image, setImage] = useState([null, null, null, null]) // input image value\r\n    const [imageURL, setImageURL] = useState([null, null, null, null]) // write URL from DB\r\n    const [smallImageURL, setSmallImageURL] = useState(\"\") // write URL from DB\r\n    const [progress, setProgress] = useState(0) // progress bar\r\n    const [showProgress, setShowProgress] = useState([false, false, false, false]) // set progress visibility\r\n\r\n    // STATE - input Description\r\n    const [inputDescription, setInputDescription] = useState('') // input value\r\n    const [inputDescriptionValidation, setInputDescriptionValidation] = useState(0) // input value\r\n\r\n    // STATE - set technical knowlage\r\n    const [techKnowledge, setTechKnowledge] = useState(\"\")\r\n    const [techKnowledgeValidation, setTechKnowledgeValidation] = useState(\"\")\r\n\r\n    // STATE - set price of meeting\r\n    const [priceOfMeeting, setPriceOfMeeting] = useState(\"\")\r\n    const [priceOfMeetingValidation, setPriceOfMeetingValidation] = useState(\"\")\r\n\r\n    // STATE - set day time to meeting\r\n    const [timeOfDay, setTimeOfDay] = useState(\"\")\r\n    const [timeOfDayValidation, setTimeOfDayValidation] = useState(\"\")\r\n\r\n    // STATE - set region\r\n    const [regionChosen, setRegionChosen] = useState(\"\")\r\n    const [regionChosenValidation, setRegionChosenValidation] = useState(\"\")\r\n\r\n    // STATE - set city\r\n    const [cityChosen, setCityChosen] = useState(\"\")\r\n    const [cityChosenValidation, setCityChosenValidation] = useState(\"\")\r\n\r\n    // STATE - input Name\r\n    const [inputName, setInputName] = useState('')\r\n    const [inputNameValidation, setInputNameValidation] = useState('')\r\n\r\n    // STATE - input Email\r\n    const [inputEmail, setInputEmail] = useState('')\r\n    const [inputEmailValidation, setInputEmailValidation] = useState('')\r\n\r\n    // STATE - input Phone\r\n    const [inputPhone, setInputPhone] = useState('')\r\n\r\n    // STATE - input time ad validation\r\n    const [timeValidationAdDayCount, setTimeValidationAdDayCount] = useState(30)\r\n\r\n    // STATE - input isPromoted\r\n    const [isPromoted, setIsPromoted] = useState(false) // input value\r\n\r\n    // STATE - input Agreenent\r\n    const [inputAgreenent, setInputAgreenent] = useState(false) // input value\r\n    const [inputAgreenentValidation, setAgreenentValidation] = useState(false) // input value\r\n\r\n\r\n    // CAR DATA:\r\n\r\n    // STATE - set car id (name)\r\n    const [carIdChosen, setCarIdChosen] = useState(\"\")\r\n    const [carIdChosenValidation, setCarIdChosenValidation] = useState(\"\")\r\n\r\n    // STATE - set car model\r\n    const [carModelChosen, setCarModelChosen] = useState(\"\")\r\n    const [carModelChosenValidation, setCarModelChosenValidation] = useState(\"\")\r\n\r\n    // STATE - set fuel\r\n    const [fuelChosen, setFuelChosen] = useState(\"\")\r\n    const [fuelChosenValidation, setFuelChosenValidation] = useState(\"\")\r\n\r\n    // STATE - set gearbox\r\n    const [gearboxChosen, setGearboxChosen] = useState(\"\")\r\n    const [gearboxChosenValidation, setGearboxChosenValidation] = useState(\"\")\r\n\r\n    // STATE - set mileage\r\n    const [mileageChosen, setMileageChosen] = useState(\"\")\r\n    const [mileageChosenValidation, setMileageChosenValidation] = useState(\"\")\r\n\r\n    // STATE - set capacity\r\n    const [capacityChosen, setCapacityChosen] = useState(\"\")\r\n    const [capacityChosenValidation, setCapacityChosenValidation] = useState(\"\")\r\n\r\n    // STATE - set power\r\n    const [powerChosen, setPowerChosen] = useState(\"\")\r\n    const [powerChosenValidation, setPowerChosenValidation] = useState(\"\")\r\n\r\n\r\n\r\n    // scroll to top when start/stop form\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0)\r\n    }, [isAddingItem])\r\n\r\n\r\n    // set Regions on Change\r\n    const setRegionChosenChandler = e => {\r\n        setRegionChosen(e.target.value)\r\n        setCityChosen(\"\") // reset city when region change\r\n    }\r\n\r\n    // set Car ID on Change\r\n    const setCarIdChosenChandler = e => {\r\n        setCarIdChosen(e.target.value)\r\n        setCarModelChosen(\"\") // reset model when Car ID change\r\n    }\r\n\r\n    // push or pull equipment item, auto fire when some equipment is add/remove\r\n    const equipmentOnChangeHandler = (item, isChecked) => {\r\n        isChecked ? equipmentChosen.push(item) : equipmentChosen.splice(equipmentChosen.findIndex(i => i === item), 1)\r\n        console.log(\"equipmentChosen: \", equipmentChosen);\r\n    }\r\n\r\n    // input title Handler\r\n    const setAdTitleHandler = (value) => {\r\n        setAdTitle(value)\r\n        setAdTitleValidation(value.length)\r\n    }\r\n\r\n    // inpud description Handler\r\n    const setInputDescriptionHandler = (value) => {\r\n        setInputDescription(value)\r\n        setInputDescriptionValidation(value.length)\r\n    }\r\n\r\n    // get photo from file/camera\r\n    const getPhoto = (e, index) => {\r\n        setImage(prevState => {\r\n            let helpArray = [...prevState]\r\n            helpArray[index] = e.target.files[0]\r\n            return helpArray\r\n        })\r\n    }\r\n\r\n    // add image 0 to DB and show to user\r\n    useEffect(() => {\r\n        addImgToDB(image[0], 0)\r\n        addImgToDB(image[0], -1, 0.05, 160) //index -1 is for smallImageURL\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [image[0]])\r\n\r\n    // add image 1 to DB and show to user\r\n    useEffect(() => {\r\n        addImgToDB(image[1], 1)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [image[1]])\r\n\r\n    // add image 2 to DB and show to user\r\n    useEffect(() => {\r\n        addImgToDB(image[2], 2)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [image[2]])\r\n\r\n    // add image 3 to DB and show to user\r\n    useEffect(() => {\r\n        addImgToDB(image[3], 3)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [image[3]])\r\n\r\n\r\n    // add image to DB and show to user, index -1 is for smallImageURL\r\n    const addImgToDB = async (image, index, maxSizeMB = 0.5, maxWidthOrHeight = \"1280\") => {\r\n\r\n        // if image is empty then return\r\n        if (!image) { return }\r\n\r\n        // if file is not image then return\r\n        if (image.type.split(\"/\")[0] !== 'image') {\r\n            setIsAlertSmallShow({ alertIcon: 'info', description: 'To nie jest zdjęcie.', animationTime: '2', borderColor: 'orange' })\r\n            return\r\n        }\r\n\r\n        // set progress bar visibile if index !== -1 => index -1 is for smallImageURL\r\n        if (index !== -1) {\r\n            setShowProgress(prevState => {\r\n                let helpArray = [...prevState]\r\n                helpArray[index] = true\r\n                return helpArray\r\n            })\r\n        }\r\n\r\n        // check image size, if more than 0.5MB or for smallImageURL then compress photo\r\n        if (image.size >= 1048576 / 2 || (index === -1)) {\r\n\r\n            // compression options\r\n            const options = {\r\n                maxSizeMB: maxSizeMB, // in MB\r\n                maxWidthOrHeight: maxWidthOrHeight, // in px\r\n                useWebWorker: true\r\n            }\r\n\r\n            // start compression\r\n            try {\r\n                image = await imageCompression(image, options)\r\n\r\n            } catch (error) {\r\n\r\n                // set progress bar invisibile\r\n                console.log(\"compression error message: \", error.message)\r\n                setIsAlertSmallShow({ alertIcon: 'error', description: 'Błąd. Kompresja nie powiodła się. Spróbuj ponownie później.', animationTime: '2', borderColor: 'red' })\r\n                setProgress(0)\r\n                setShowProgress(prevState => {\r\n                    let helpArray = [...prevState]\r\n                    helpArray[index] = false\r\n                    return helpArray\r\n                })\r\n\r\n                // return to not save in DB\r\n                return\r\n            }\r\n        }\r\n\r\n        console.log(\"image.size: \", image.size / 1000 + \" kB\");\r\n\r\n        // send photo to DB\r\n        const uploadTask = storage.ref(`images/${localStorage.getItem(UID)}/${id}/${index}`).put(image)\r\n        uploadTask.on('state_changed',\r\n            snapshot => { setProgress(Math.round((snapshot.bytesTransferred / snapshot.totalBytes) * 100)) },//progress bar\r\n            err => { //show if error\r\n                console.log('upload error: ', err)\r\n                setIsAlertSmallShow({ alertIcon: 'error', description: 'Błąd. Spróbuj ponownie później.', animationTime: '2', borderColor: 'red' })\r\n                setProgress(0)\r\n                // set progress bar invisibile\r\n                setShowProgress(prevState => {\r\n                    let helpArray = [...prevState]\r\n                    helpArray[index] = false\r\n                    return helpArray\r\n                })\r\n            },\r\n            () => {\r\n                storage // get url\r\n                    .ref(`images/${localStorage.getItem(UID)}/${id}`)\r\n                    .child(`${index}`)\r\n                    .getDownloadURL() // get url\r\n                    .then(url => {\r\n\r\n                        // write url in state, index - 1 is for smallImageURL\r\n                        if (index !== -1) {\r\n                            setImageURL(prevState => {\r\n                                let helpArray = [...prevState]\r\n                                helpArray[index] = url\r\n                                return helpArray\r\n                            })\r\n                        } else {\r\n                            setSmallImageURL(url)\r\n                        }\r\n\r\n                        setProgress(0)\r\n                        // set progress bar invisibile\r\n                        setShowProgress(prevState => {\r\n                            let helpArray = [...prevState]\r\n                            helpArray[index] = false\r\n                            return helpArray\r\n                        })\r\n                    })\r\n\r\n                    .catch(errStorage => {\r\n                        console.log('storage errStorage', errStorage)\r\n                        setIsAlertSmallShow({ alertIcon: 'error', description: 'Błąd. Spróbuj ponownie później.', animationTime: '2', borderColor: 'red' })\r\n                        setProgress(0)\r\n                        // set progress bar invisibile\r\n                        setShowProgress(prevState => {\r\n                            let helpArray = [...prevState]\r\n                            helpArray[index] = false\r\n                            return helpArray\r\n                        })\r\n                    })\r\n            })\r\n    }\r\n\r\n    // generate new unique id of ad\r\n    const idGenerator = (mainCategory) => {\r\n\r\n        //generate id: DB name +  data(year-month-day) + data(from1970 in ms) + random string\r\n        const idGenerator = `${mainCategory} ${new Date().getFullYear()}-${new Date().getMonth() + 1}-${new Date().getDate()} ${new Date().getTime()} ${Math.random().toString(36).substr(2)}`\r\n        setId(idGenerator)\r\n        console.log(\"id: \", idGenerator);\r\n    }\r\n\r\n\r\n    // call when click new category => OK\r\n    const mainCategoryHandler = (nameDB) => {\r\n\r\n        // delete photos from DB STORAGE\r\n        deleteImagesAndFolderFromDB(id)\r\n        setImage(image.map(() => null)) // clear image holder\r\n        setImageURL(imageURL.map(() => null)) // clear image URL holder\r\n        setSmallImageURL(\"\") // clear small image URL holder\r\n\r\n        // auto generate new unique key \r\n        idGenerator(nameDB)\r\n\r\n        //set new category\r\n        setMainCategory(nameDB)\r\n\r\n        //clear only item data form\r\n        setTypeChosen(\"\")\r\n        setCarIdChosen(\"\")\r\n        setCarModelChosen(\"\")\r\n        setFuelChosen(\"\")\r\n        setGearboxChosen(\"\")\r\n        setMileageChosen(\"\")\r\n        setCapacityChosen(\"\")\r\n        setPowerChosen(\"\")\r\n        setYearChosen(\"\")\r\n        equipmentChosen = []\r\n    }\r\n\r\n    // clear all data from form and close item form => OK\r\n    const clearAllDataFromFormAndClose = () => {\r\n\r\n        //all categories\r\n        setId(\"\")\r\n        setMainCategory(mainCategories[0].nameDB)\r\n        setTypeChosen(\"\")\r\n        setTypeChosenValidation(\"\")\r\n        setYearChosen(\"\")\r\n        setYearChosenValidation(\"\")\r\n        setAdTitle(\"\")\r\n        setAdTitleValidation(0)\r\n        setImage(image.map(() => null)) // clear image holder\r\n        setImageURL(imageURL.map(() => null)) // clear image URL holder\r\n        setSmallImageURL(\"\") // clear small image URL holder\r\n        setInputDescription(\"\")\r\n        setInputDescriptionValidation(0)\r\n        setTechKnowledge(\"\")\r\n        setTechKnowledgeValidation(\"\")\r\n        setPriceOfMeeting(\"\")\r\n        setPriceOfMeetingValidation(\"\")\r\n        setTimeOfDay(\"\")\r\n        setTimeOfDayValidation(\"\")\r\n        setRegionChosen(\"\")\r\n        setRegionChosenValidation(\"\")\r\n        setCityChosen(\"\")\r\n        setCityChosenValidation(\"\")\r\n        setInputName(\"\")\r\n        setInputNameValidation(\"\")\r\n        setInputEmail(\"\")\r\n        setInputEmailValidation(\"\")\r\n        setInputPhone(\"\")\r\n        setTimeValidationAdDayCount(30)\r\n        setIsPromoted(false)\r\n        setInputAgreenent(false)\r\n        setAgreenentValidation(false)\r\n\r\n        // only car category\r\n        setCarIdChosen(\"\")\r\n        setCarIdChosenValidation(\"\")\r\n        setCarModelChosen(\"\")\r\n        setCarModelChosenValidation(\"\")\r\n        setFuelChosen(\"\")\r\n        setFuelChosenValidation(\"\")\r\n        setGearboxChosen(\"\")\r\n        setGearboxChosenValidation(\"\")\r\n        setMileageChosen(\"\")\r\n        setMileageChosenValidation(\"\")\r\n        setCapacityChosen(\"\")\r\n        setCapacityChosenValidation(\"\")\r\n        setPowerChosen(\"\")\r\n        setPowerChosenValidation(\"\")\r\n        equipmentChosen = []\r\n\r\n        // close item form\r\n        setIsAddingItem(false)\r\n    }\r\n\r\n    // add all data to form  => OK\r\n    const setDataToForm = item => {\r\n\r\n        // data for all ads\r\n        setId(item.adData.id)// unique ID is always the same as document Key in DB, \r\n        setMainCategory(item.adData.mainCategory) // main category of ad\r\n\r\n        // all ads from form\r\n        setTypeChosen(item.itemData.typeChosen)\r\n        setYearChosen(item.itemData.yearChosen)\r\n        setAdTitle(item.itemDescription.adTitle)\r\n        setAdTitleValidation(item.itemDescription.adTitle.length)\r\n        setImageURL(item.itemDescription.imageURL) // all images URL in array\r\n        setSmallImageURL(item.itemDescription.smallImageURL) // small image to show only in list of ads\r\n        setInputDescription(item.itemDescription.inputDescription)\r\n        setInputDescriptionValidation(item.itemDescription.inputDescription.length)\r\n        setTechKnowledge(item.meetingDescription.techKnowledge)\r\n        setPriceOfMeeting(item.meetingDescription.priceOfMeeting)\r\n        setTimeOfDay(item.meetingDescription.timeOfDay)\r\n        setRegionChosen(item.userData.regionChosen)\r\n        setCityChosen(item.userData.cityChosen)\r\n        setInputName(item.userData.inputName)\r\n        setInputEmail(item.userData.inputEmail)\r\n        setInputPhone(item.userData.inputPhone)\r\n        setTimeValidationAdDayCount(item.adData.timeValidationAdDayCount)\r\n        setIsPromoted(item.adData.isPromoted) // when edit mut be the same\r\n        setInputAgreenent(item.adData.inputAgreenent) // when edit must be the same\r\n\r\n        // only car category\r\n        setCarIdChosen(item.itemData.carIdChosen)\r\n        setCarModelChosen(item.itemData.carModelChosen)\r\n        setFuelChosen(item.itemData.fuelChosen)\r\n        setGearboxChosen(item.itemData.gearboxChosen)\r\n        setMileageChosen(item.itemData.mileageChosen)\r\n        setCapacityChosen(item.itemData.capacityChosen)\r\n        setPowerChosen(item.itemData.powerChosen)\r\n        equipmentChosen = item.itemData.equipmentChosen\r\n    }\r\n\r\n\r\n    // validate data from form, return true if valid and false if not\r\n    const checkFormValidation = () => {\r\n\r\n        let allValidations = true\r\n\r\n        //constans\r\n        const NIE_WYBRANO = \"Nie wybrano\"\r\n        const NIE_WPROWADZONO = \"Brak informacji\"\r\n        const NIEPOPRAWNA_WARTOSC = \"Niepoprawna wartość\"\r\n        const NIEPOPRAWNE_IMIE = \"Niepoprawne imię\"\r\n        const NIEPOPRAWNY_ADRES_EMAIL = \"Niepoprawny adres e-mail\"\r\n\r\n        //only car\r\n        if (mainCategory === mainCategories[0].nameDB) {\r\n\r\n            if (!carIdChosen) {\r\n                setCarIdChosenValidation(NIE_WYBRANO)\r\n                allValidations = false\r\n            } else { setCarIdChosenValidation(\"\") }\r\n\r\n            if (!carModelChosen) {\r\n                setCarModelChosenValidation(NIE_WYBRANO)\r\n                allValidations = false\r\n            } else { setCarModelChosenValidation(\"\") }\r\n\r\n            if (!fuelChosen) {\r\n                setFuelChosenValidation(NIE_WYBRANO)\r\n                allValidations = false\r\n            } else { setFuelChosenValidation(\"\") }\r\n\r\n            if (!gearboxChosen) {\r\n                setGearboxChosenValidation(NIE_WYBRANO)\r\n                allValidations = false\r\n            } else { setGearboxChosenValidation(\"\") }\r\n\r\n            if (!mileageChosen) {\r\n                setMileageChosenValidation(NIE_WYBRANO)\r\n                allValidations = false\r\n            } else { setMileageChosenValidation(\"\") }\r\n\r\n            if (!capacityChosen || capacityChosen.length > 4) {\r\n                setCapacityChosenValidation(NIEPOPRAWNA_WARTOSC)\r\n                allValidations = false\r\n            } else { setCapacityChosenValidation(\"\") }\r\n\r\n            if (!powerChosen || powerChosen.length > 3) {\r\n                setPowerChosenValidation(NIEPOPRAWNA_WARTOSC)\r\n                allValidations = false\r\n            } else { setPowerChosenValidation(\"\") }\r\n        }\r\n\r\n\r\n        //rest all\r\n        if (!typeChosen) {\r\n            setTypeChosenValidation(NIE_WYBRANO)\r\n            allValidations = false\r\n        } else { setTypeChosenValidation(\"\") }\r\n\r\n        if (!yearChosen) {\r\n            setYearChosenValidation(NIE_WYBRANO)\r\n            allValidations = false\r\n        } else { setYearChosenValidation(\"\") }\r\n\r\n        if (adTitle.length < 10 || adTitle.length > 50) {\r\n            allValidations = false\r\n        }\r\n\r\n        if (inputDescription.length < 50 || inputDescription.length > 500) {\r\n            allValidations = false\r\n        }\r\n\r\n        if (!techKnowledge) {\r\n            setTechKnowledgeValidation(NIE_WYBRANO)\r\n            allValidations = false\r\n        } else { setTechKnowledgeValidation(\"\") }\r\n\r\n        if (!priceOfMeeting || priceOfMeeting.length > 3) {\r\n            setPriceOfMeetingValidation(NIEPOPRAWNA_WARTOSC)\r\n            allValidations = false\r\n        } else { setPriceOfMeetingValidation(\"\") }\r\n\r\n        if (!timeOfDay) {\r\n            setTimeOfDayValidation(NIE_WPROWADZONO)\r\n            allValidations = false\r\n        } else { setTimeOfDayValidation(\"\") }\r\n\r\n        if (!regionChosen) {\r\n            setRegionChosenValidation(NIE_WYBRANO)\r\n            allValidations = false\r\n        } else { setRegionChosenValidation(\"\") }\r\n\r\n        if (!cityChosen) {\r\n            setCityChosenValidation(NIE_WYBRANO)\r\n            allValidations = false\r\n        } else { setCityChosenValidation(\"\") }\r\n\r\n        if (inputName.length < 3) {\r\n            setInputNameValidation(NIEPOPRAWNE_IMIE)\r\n            allValidations = false\r\n        } else { setInputNameValidation(\"\") }\r\n\r\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        if (!re.test(String(inputEmail).toLowerCase())) {\r\n            setInputEmailValidation(NIEPOPRAWNY_ADRES_EMAIL)\r\n            allValidations = false\r\n        } else { setInputEmailValidation(\"\") }\r\n\r\n        if (!inputAgreenent) {\r\n            setAgreenentValidation(true)\r\n            allValidations = false\r\n        } else { setAgreenentValidation(false) }\r\n\r\n        return allValidations\r\n    }\r\n\r\n\r\n    // get data from form\r\n    const getDataFromForm = () => {\r\n\r\n        // object to save in DB => OK\r\n        const formObject = {\r\n\r\n            /*elements added in backend :\r\n            userData: {userId}\r\n            adData: { isApproved, isApprovedReason, createDate, timeValidationDate (number days change from timeValidationAdDayCount)}\r\n            */\r\n\r\n            // data for all ads\r\n\r\n            itemData: { // index excluded in cars collection\r\n\r\n                // all ads from form\r\n                typeChosen: typeChosen,\r\n                yearChosen: yearChosen,\r\n\r\n                // only car category from form\r\n                carIdChosen: carIdChosen,\r\n                carModelChosen: carModelChosen,\r\n                fuelChosen: fuelChosen,\r\n                gearboxChosen: gearboxChosen,\r\n                mileageChosen: mileageChosen,\r\n                capacityChosen: capacityChosen,\r\n                powerChosen: powerChosen,\r\n                equipmentChosen: equipmentChosen,\r\n            },\r\n\r\n\r\n            itemDescription: { // index excluded in cars collection\r\n                adTitle: adTitle,\r\n                imageURL: imageURL, // all images URL in array // index excluded\r\n                smallImageURL: smallImageURL, // small image to show only in list of ads\r\n                inputDescription: inputDescription,\r\n            },\r\n\r\n            meetingDescription: { // index excluded in cars collection\r\n                techKnowledge: techKnowledge,\r\n                priceOfMeeting: priceOfMeeting,\r\n                timeOfDay: timeOfDay,\r\n            },\r\n\r\n            userData: { // index excluded in cars collection\r\n                userPhoto: auth.currentUser.photoURL, // user login photo from login social media\r\n                regionChosen: regionChosen,\r\n                cityChosen: cityChosen,\r\n                inputName: inputName,\r\n                inputEmail: inputEmail,\r\n                inputPhone: inputPhone,\r\n            },\r\n\r\n            adData: { // index excluded in cars collection\r\n                id: id, // unique ID is always the same as document Key in DB, Contains => 1. collection name, 2. adding date, 3. time 1970 ,4. random string\r\n                mainCategory: mainCategory, // main category of ad\r\n                timeValidationAdDayCount: timeValidationAdDayCount,\r\n                isPromoted: isPromoted, // user set promoted or not\r\n                inputAgreenent: inputAgreenent,\r\n            },\r\n\r\n\r\n        }\r\n        console.log(formObject)\r\n        return formObject\r\n    }\r\n\r\n\r\n    // get FAKE data \r\n    const getFAKEDataFromForm = () => {\r\n        const formObject = {\r\n\r\n            itemData: {\r\n\r\n                // all ads from form\r\n                typeChosen: \"Hatchback\",\r\n                yearChosen: \"2020\",\r\n\r\n                // only car category from form\r\n                carIdChosen: \"bmw\",\r\n                carModelChosen: \"Seria 3\",\r\n                fuelChosen: \"Diesel\", // index excluded in cars collection\r\n                gearboxChosen: \"Manualna\", // index excluded in cars collection\r\n                mileageChosen: \"50-100\", // index excluded in cars collection\r\n                capacityChosen: \"2700\", // index excluded in cars collection\r\n                powerChosen: \"90\", // index excluded in cars collection\r\n                equipmentChosen: [\"onBoardComputer\"], // index excluded in cars collection\r\n            },\r\n\r\n\r\n            itemDescription: {\r\n                adTitle: \"OSOBOWE 50 znaków Lorem ipsum dolor sit aec adipis\",  // index excluded in cars collection\r\n                imageURL: [\"https://firebasestorage.googleapis.com/v0/b/jatestuje-pl.appspot.com/o/images%2FO3vuzsnjybMrpWQEt5UhiO4uPek1%2Fcars%202021-2-26%201614369647630%20r75kfl9mj%2F0?alt=media&token=c59d35ff-458e-46d1-89b8-343707c6efe2\"], // all images URL in array // index excluded\r\n                smallImageURL: \"https://firebasestorage.googleapis.com/v0/b/jatestuje-pl.appspot.com/o/images%2FO3vuzsnjybMrpWQEt5UhiO4uPek1%2Fcars%202021-2-26%201614369647630%20r75kfl9mj%2F-1?alt=media&token=bf31f084-c475-421d-817d-b0a9085ac4ed\", // small image to show only in list of ads  // index excluded\r\n                inputDescription: \"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dicta deserunt eveniet sed officiis velit accusantium illo vitae in sunt reiciendis repellendus officia minima itaque, asperiores nobis voluptates odit quae impedit. Maiores unde quis inventore optio officia? Assumenda pariatur est, excepturi provident aliquam recusandae nisi incidunt et praesentium. Obcaecati, porro maxime.\", // index excluded in cars collection\r\n            },\r\n\r\n            meetingDescription: {\r\n                techKnowledge: \"Dobra\", // index excluded in cars collection\r\n                priceOfMeeting: \"150\", // index excluded in cars collection\r\n                timeOfDay: \"zawsze\", // index excluded in cars collection\r\n            },\r\n\r\n            userData: {\r\n                userPhoto: \"https://lh5.googleusercontent.com/-EzRg2MRmQ7U/AAAAAAAAAAI/AAAAAAAAAAA/AMZuuclO9YakK8o2F7vB4MTNVchsIiYDxg/s96-c/photo.jpg\", // user login photo from login social media  // index excluded in cars collection\r\n                regionChosen: \"pomorskie\",\r\n                cityChosen: \"Gdynia\",\r\n                inputName: \"Jan\", // index excluded in cars collection\r\n                inputEmail: \"jan@jan.com\", // index excluded in cars collection\r\n                inputPhone: \"100-220-300\", // index excluded in cars collection\r\n            },\r\n\r\n            adData: {\r\n                id: `${mainCategory} ${new Date().getFullYear()}-${new Date().getMonth() + 1}-${new Date().getDate()} ${new Date().getTime()} ${Math.random().toString(36).substr(2)}`,\r\n                mainCategory: 'cars', // main category of ad\r\n                timeValidationAdDayCount: 30,\r\n                isPromoted: false, // user set promoted or not\r\n                inputAgreenent: true, // index excluded in cars collection\r\n            },\r\n        }\r\n        console.log(formObject)\r\n\r\n        sendAddItemToDB(formObject)\r\n    }\r\n\r\n\r\n\r\n    // call when cancel form\r\n    const cancelForm = () => {\r\n\r\n        // delete photos from DB STORAGE with images only when adding ad, if edit or refresh then not clear\r\n        isAddingItem === ADD_AD && deleteImagesAndFolderFromDB(id)\r\n\r\n        // clear all data from form and close item form\r\n        clearAllDataFromFormAndClose()\r\n    }\r\n\r\n\r\n    // after finish form, use form for: add, edit or refresh ad\r\n    const handleReadyAd = () => {\r\n\r\n        switch (isAddingItem) {\r\n            case ADD_AD:\r\n                sendAddItemToDB()\r\n                break;\r\n            case EDIT_AD:\r\n                sendEditItemToDB()\r\n                break;\r\n            case REFRESH_AD:\r\n                sendRefreshItemToDB()\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    // prepare form to add ad\r\n    const prepareAddItemFromDB = (e, item) => {\r\n\r\n        console.log(\"item add: \", item);\r\n\r\n        // auto generate new key\r\n        idGenerator(mainCategory)\r\n\r\n        // show form\r\n        setIsAddingItem(ADD_AD)\r\n    }\r\n\r\n    // send ad to DB\r\n    const sendAddItemToDB = (formObject = getDataFromForm()) => {\r\n\r\n        //check if data in form is valid\r\n        if (!checkFormValidation()) { return }\r\n\r\n        // get object with all data - usunąć parametr z funkcji i to włączyć\r\n        //const formObject = getDataFromForm()\r\n\r\n        //clear ads list before load\r\n        setUserAds([])\r\n\r\n        // show main spinner\r\n        setIsMainSpinnerShow(true)\r\n\r\n        // clear all data from form and close\r\n        clearAllDataFromFormAndClose()\r\n\r\n        console.log(\"item: \", formObject)\r\n\r\n        // create obj in DB - call backend\r\n        const createAd = functions.httpsCallable('createAd')\r\n        createAd({ item: formObject })\r\n            .then(resp => {\r\n\r\n                // update view after refresh ad\r\n                getUserAds()\r\n\r\n                // show alert\r\n                setIsAlertSmallShow({ alertIcon: 'OK', description: 'Ogłoszenie dodane.', animationTime: '2', borderColor: 'green' })\r\n                console.log(\"DB response: \", resp.data)\r\n\r\n            })\r\n            .catch(err => {\r\n\r\n                // show alert Error\r\n                setIsAlertSmallShow({ alertIcon: 'error', description: 'Błąd. Spróbuj ponownie później.', animationTime: '2', borderColor: 'red' })\r\n                console.log(err)\r\n\r\n                // hide main spinner\r\n                setIsMainSpinnerShow(false)\r\n            })\r\n    }\r\n\r\n    // prepare form to edit one\r\n    const prepareEditItemFromDB = (e, item) => {\r\n\r\n        console.log(\"item edit: \", item);\r\n\r\n        //set ad data to form\r\n        setDataToForm(item)\r\n\r\n        // show form\r\n        setIsAddingItem(EDIT_AD)\r\n    }\r\n\r\n    // send edited ad to DB\r\n    const sendEditItemToDB = () => {\r\n\r\n        //check if data in form is valid\r\n        if (!checkFormValidation()) { return }\r\n\r\n        //clear ads list before load\r\n        setUserAds([])\r\n\r\n        // show main spinner\r\n        setIsMainSpinnerShow(true)\r\n\r\n        // get data from form\r\n        const formObject = getDataFromForm()\r\n\r\n        // clear all data from form and close\r\n        clearAllDataFromFormAndClose()\r\n\r\n        // create obj in DB - call backend\r\n        const editAd = functions.httpsCallable('editAd')\r\n        editAd({ item: formObject })\r\n            .then(resp => {\r\n\r\n                // update view after refresh ad\r\n                getUserAds()\r\n\r\n                // show alert\r\n                setIsAlertSmallShow({ alertIcon: 'OK', description: 'Ogłoszenie zmienione.', animationTime: '2', borderColor: 'green' })\r\n                console.log(\"DB response: \", resp.data)\r\n\r\n            })\r\n            .catch(err => {\r\n\r\n                // show alert Error\r\n                setIsAlertSmallShow({ alertIcon: 'error', description: 'Błąd. Spróbuj ponownie później.', animationTime: '2', borderColor: 'red' })\r\n                console.log(err)\r\n\r\n                // hide main spinner\r\n                setIsMainSpinnerShow(false)\r\n            })\r\n    }\r\n\r\n    // prepare form to refresh one ad\r\n    const prepareRefreshItemFromDB = (e, item) => {\r\n\r\n        console.log(\"item refresh: \", item);\r\n\r\n        //set ad data to form\r\n        setDataToForm(item)\r\n\r\n        // show form\r\n        setIsAddingItem(REFRESH_AD)\r\n    }\r\n\r\n\r\n    // send refreshed ad to DB\r\n    const sendRefreshItemToDB = () => {\r\n\r\n        //check if data in form is valid\r\n        if (!checkFormValidation()) { return }\r\n\r\n        //clear ads list before load\r\n        setUserAds([])\r\n\r\n        // show main spinner\r\n        setIsMainSpinnerShow(true)\r\n\r\n        // clear all data from form and close\r\n        clearAllDataFromFormAndClose()\r\n\r\n        // get data from form\r\n        const formObject = getDataFromForm()\r\n\r\n        // refresh ad - call backend\r\n        const refreshAd = functions.httpsCallable('refreshAd')\r\n        refreshAd({ item: formObject })\r\n            .then(resp => {\r\n\r\n                // update view after refresh ad\r\n                getUserAds()\r\n\r\n                // show alert\r\n                setIsAlertSmallShow({ alertIcon: 'OK', description: 'Przedłużono ważność ogłoszenia.', animationTime: '2', borderColor: 'green' })\r\n                console.log(\"DB response refresh: \", resp.data)\r\n            })\r\n            .catch(err => {\r\n\r\n                // show alert Error\r\n                setIsAlertSmallShow({ alertIcon: 'error', description: 'Błąd. Spróbuj ponownie później.', animationTime: '2', borderColor: 'red' })\r\n                console.log(err)\r\n\r\n                // hide main spinner\r\n                setIsMainSpinnerShow(false)\r\n            })\r\n    }\r\n\r\n\r\n    // delete one ad from DB\r\n    const deleteItemFromDB = (e, item) => {\r\n\r\n        //clear ads list before load\r\n        setUserAds([])\r\n\r\n        // show main spinner\r\n        setIsMainSpinnerShow(true)\r\n\r\n        // delete ad - call backend + frontend for photos\r\n        const deleteAd = functions.httpsCallable('deleteAd')\r\n        deleteAd({ item: item })\r\n            .then(resp => {\r\n\r\n                // delete one ad from DB STORAGE with images\r\n                deleteImagesAndFolderFromDB(item.id)\r\n\r\n                // update view after refresh ad\r\n                getUserAds()\r\n\r\n                // show alert\r\n                setIsAlertSmallShow({ alertIcon: 'OK', description: 'Usunieto ogłoszenie.', animationTime: '2', borderColor: 'green' })\r\n                console.log(\"DB response delete: \", resp.data)\r\n            })\r\n            .catch(err => {\r\n\r\n                // show alert Error\r\n                setIsAlertSmallShow({ alertIcon: 'error', description: 'Błąd. Spróbuj ponownie później.', animationTime: '2', borderColor: 'red' })\r\n                console.log(err)\r\n\r\n                // hide main spinner\r\n                setIsMainSpinnerShow(false)\r\n            })\r\n    }\r\n\r\n\r\n    // ----------------------- STOP ADD ITEM --------------------------//\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        localStorage.getItem(UID)\r\n\r\n            // user Log In\r\n            ? <section className={style.background}>\r\n\r\n                {/* AlertSmall */}\r\n                {isAlertSmallShow && <AlertSmall alertIcon={isAlertSmallShow.alertIcon} description={isAlertSmallShow.description} animationTime={isAlertSmallShow.animationTime} borderColor={isAlertSmallShow.borderColor} hide={() => setIsAlertSmallShow(false)} />}\r\n\r\n                <div className={style.container}>\r\n\r\n                    {!isAddingItem\r\n\r\n                        // USER LIST ITEMS\r\n                        ? <div className={style.user}>\r\n                            <p className={style.user__title}>Witaj {auth.currentUser?.displayName}</p>\r\n                            <p className={style.user__itemsDesc}>Twoje ogłoszenia:</p>\r\n                            <div className={style.user__itemsContainer}>\r\n\r\n                                {isMainSpinnerShow && <Spinner />}\r\n\r\n                                {userAds.map(item => {\r\n                                    return (\r\n                                        <div key={item.adData.id} className={style.user__item}>\r\n\r\n                                            <figure className={style.user__itemFigure}>\r\n                                                <img className={style.user__itemImg} src={item.itemDescription.smallImageURL || PhotoEmpty} alt=\"main ad\" onError={(e) => { e.target.onerror = null; e.target.src = PhotoEmpty }} />\r\n                                            </figure>\r\n\r\n                                            <div className={style.user__itemDescContainer}>\r\n                                                <div className={style.user__itemDescTop}>\r\n                                                    <p className={style.user__itemText}>{item.itemDescription.adTitle}</p>\r\n                                                </div>\r\n\r\n                                                <div className={style.user__itemDescTop}>\r\n                                                    <div className={style.user__itemDescTopLeft}>\r\n                                                        <p className={style.user__itemText}>{mainCategories.find(i => i.nameDB === item.adData.mainCategory).name}:</p>\r\n\r\n                                                        {item.carIdChosen\r\n                                                            ? <div className={style.flexRow}>\r\n                                                                <p className={style.user__itemText}>{mainCategories[0].brand.find(i => i.id === item.itemData.carIdChosen).name}</p>\r\n                                                                <p className={style.user__itemText}>{item.itemData.carModelChosen}</p>\r\n                                                            </div>\r\n                                                            : <p className={style.user__itemText}>{item.itemData.typeChosen}</p>\r\n                                                        }\r\n\r\n                                                    </div>\r\n                                                    <div className={style.user__itemDescTopRight} >\r\n                                                        <p className={style.user__itemText}>{item.meetingDescription.priceOfMeeting} zł/h</p>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                {item.adData.isApproved\r\n                                                    ? <p className={style.user__itemDescMiddleText} style={{ color: \"green\" }}>Zaakceptowane</p>\r\n                                                    : <p className={style.user__itemDescMiddleText} style={{ color: \"red\" }}>{`Brak akceptacji: ${item.adData.isApprovedReason}`}</p>}\r\n\r\n                                                {new Date().getTime() <= item.adData.timeValidationDate\r\n                                                    ? <p className={style.user__itemDescMiddleText} style={{ color: \"green\" }}>Ważność ogłoszenia: {dayTextConverter(item.adData.timeValidationDate)} </p>\r\n\r\n                                                    : <div className={style.user__itemDescBottom}>\r\n                                                        <p className={style.user__itemDescMiddleText} style={{ color: \"red\" }}>Ogłoszenie nieważne</p>\r\n                                                        <button className={style.user__itemButton} onClick={e => prepareRefreshItemFromDB(e, item)}>przedłuż ważność</button>\r\n                                                    </div>}\r\n\r\n                                                {item.adData.isPromoted && <p className={style.user__itemDescMiddleText} style={{ color: \"blue\" }}>Promowane</p>}\r\n\r\n                                                <div className={style.user__itemDescBottom}>\r\n                                                    <Link className={style.user__itemButton} to={`/offer/${item.adData.id}`}>zobacz</Link>\r\n                                                    <button className={style.user__itemButton} onClick={e => prepareEditItemFromDB(e, item)}>edytuj</button>\r\n                                                    <button className={style.user__itemButton} onClick={e => deleteItemFromDB(e, item)}>usuń</button>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                                }\r\n                                <div className={style.user__itemAdSVG} onClick={prepareAddItemFromDB}>\r\n                                    <Ad />\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* <button onClick={getFAKEDataFromForm}>Dodaj fejkowe ogłoszenie</button> */}\r\n\r\n                        </div>\r\n\r\n\r\n                        // AD ITEM\r\n                        : <div className={style.ad}>\r\n\r\n                            {/* main category section */}\r\n                            {isAddingItem === ADD_AD\r\n                                && <div className={style.ad__section}>\r\n                                    <p className={style.ad__title}>Kategorie:</p>\r\n                                    <div className={style.ad__container}>\r\n                                        {mainCategories.map(item => {\r\n                                            return (\r\n                                                <div key={item.nameDB} className={`${style.add__categoriesItemContainer} ${(mainCategory === item.nameDB) && style.add__categoriesItemContainerActive}`} onClick={() => mainCategoryHandler(item.nameDB)}>\r\n                                                    <figure className={style.add__categoriesItemFigure}>\r\n                                                        <img className={style.add__categoriesItemImg} src={item.photo} alt=\"main\" />\r\n                                                    </figure>\r\n                                                    <p className={style.add__categoriesItemDesc}>{item.name}</p>\r\n                                                </div>\r\n                                            )\r\n                                        })}\r\n                                    </div>\r\n                                </div>}\r\n\r\n                            {/* car section */}\r\n                            {(isAddingItem === ADD_AD || isAddingItem === EDIT_AD)\r\n                                && <div className={style.ad__section}>\r\n                                    <p className={style.ad__title}>Dane:</p>\r\n\r\n                                    <div className={style.ad__container}>\r\n\r\n                                        {(mainCategory === mainCategories[0].nameDB)\r\n                                            && <div className={style.ad__itemContainer}>\r\n                                                <p className={style.ad__itemDesc}>Marka:</p>\r\n                                                <select className={style.ad__itemList} onChange={setCarIdChosenChandler} value={carIdChosen}>\r\n                                                    {mainCategories[0].brand.map(item => <option key={item.id} value={item.id}>{item.name}</option>)}\r\n                                                </select>\r\n                                                <p className={style.ad__itemDescValidation}>{carIdChosenValidation}</p>\r\n                                            </div>}\r\n\r\n                                        {(mainCategory === mainCategories[0].nameDB)\r\n                                            && <div className={style.ad__itemContainer}>\r\n                                                <p className={style.ad__itemDesc}>Model:</p>\r\n                                                <select disabled={!carIdChosen} className={style.ad__itemList} onChange={e => setCarModelChosen(e.target.value)} value={carModelChosen}>\r\n                                                    {mainCategories[0].brand.find(item => item.id === carIdChosen).models.map(item => <option key={item} value={item}>{item}</option>)}\r\n                                                </select>\r\n                                                <p className={style.ad__itemDescValidation}>{carModelChosenValidation}</p>\r\n                                            </div>}\r\n\r\n                                        {(mainCategory === mainCategories[0].nameDB)\r\n                                            && <div className={style.ad__itemContainer}>\r\n                                                <p className={style.ad__itemDesc}>Paliwo:</p>\r\n                                                <select className={style.ad__itemList} onChange={e => setFuelChosen(e.target.value)} value={fuelChosen}>\r\n                                                    {fuel.map(item => <option key={item} value={item}>{item}</option>)}\r\n                                                </select>\r\n                                                <p className={style.ad__itemDescValidation}>{fuelChosenValidation}</p>\r\n                                            </div>}\r\n\r\n                                        {(mainCategory === mainCategories[0].nameDB)\r\n                                            && <div className={style.ad__itemContainer}>\r\n                                                <p className={style.ad__itemDesc}>Skrzynia biegów:</p>\r\n                                                <select className={style.ad__itemList} onChange={e => setGearboxChosen(e.target.value)} value={gearboxChosen}>\r\n                                                    {gearbox.map(item => <option key={item} value={item}>{item}</option>)}\r\n                                                </select>\r\n                                                <p className={style.ad__itemDescValidation}>{gearboxChosenValidation}</p>\r\n                                            </div>}\r\n\r\n                                        {(mainCategory === mainCategories[0].nameDB)\r\n                                            && <div className={style.ad__itemContainer}>\r\n                                                <p className={style.ad__itemDesc}>Przebieg (tyś km.):</p>\r\n                                                <select className={style.ad__itemList} onChange={e => setMileageChosen(e.target.value)} value={mileageChosen}>\r\n                                                    {mileage.map(item => <option key={item} value={item}>{item}</option>)}\r\n                                                </select>\r\n                                                <p className={style.ad__itemDescValidation}>{mileageChosenValidation}</p>\r\n                                            </div>}\r\n\r\n                                        {(mainCategory === mainCategories[0].nameDB)\r\n                                            && <div className={style.ad__itemContainer}>\r\n                                                <label className={style.ad__itemDesc}>Pojemność (cm3):</label>\r\n                                                <input onChange={event => setCapacityChosen(event.target.value)} value={capacityChosen} className={style.ad__itemList} type='number' />\r\n                                                <p className={style.ad__itemDescValidation}>{capacityChosenValidation}</p>\r\n                                            </div>}\r\n\r\n                                        {(mainCategory === mainCategories[0].nameDB)\r\n                                            && <div className={style.ad__itemContainer}>\r\n                                                <label className={style.ad__itemDesc}>Moc (KM):</label>\r\n                                                <input onChange={event => setPowerChosen(event.target.value)} value={powerChosen} className={style.ad__itemList} type='number' />\r\n                                                <p className={style.ad__itemDescValidation}>{powerChosenValidation}</p>\r\n                                            </div>}\r\n\r\n                                        <div className={style.ad__itemContainer}>\r\n                                            <p className={style.ad__itemDesc}>Typ:</p>\r\n                                            <select className={style.ad__itemList} onChange={e => setTypeChosen(e.target.value)} value={typeChosen}>\r\n                                                {mainCategories.find(i => mainCategory === i.nameDB).type.map(item => <option key={item} value={item}>{item}</option>)}\r\n                                            </select>\r\n                                            <p className={style.ad__itemDescValidation}>{typeChosenValidation}</p>\r\n                                        </div>\r\n\r\n                                        <div className={style.ad__itemContainer}>\r\n                                            <p className={style.ad__itemDesc}>Rok produkcji:</p>\r\n                                            <select className={style.ad__itemList} onChange={e => setYearChosen(e.target.value)} value={yearChosen}>\r\n                                                {yearsWithEmptyEl.map(item => <option key={item} value={item}>{item !== \"0\" ? item : \"pozostałe\"}</option>)}\r\n                                            </select>\r\n                                            <p className={style.ad__itemDescValidation}>{yearChosenValidation}</p>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {(mainCategory === mainCategories[0].nameDB)\r\n                                        && <div className={style.ad__container}>\r\n                                            <fieldset className={style.ad__containerEquipment}>\r\n                                                <legend className={style.ad__legendEquipment}>Wyposarzenie: </legend>\r\n\r\n                                                {carEquipment.map(item => {\r\n                                                    return (\r\n                                                        <div key={item.id} className={style.ad_checkBoxContainerEquipment}>\r\n                                                            <input defaultChecked={equipmentChosen.some(i => i === item.id)} name={item.id} onChange={event => equipmentOnChangeHandler((event.target.name), (event.target.checked ? true : false))} className={style.ad__inputCheckBoxEquipment} type='checkbox' />\r\n                                                            <label className={style.ad__labelCheckBoxEquipment}>{item.name}</label>\r\n\r\n                                                        </div>\r\n                                                    )\r\n                                                })}\r\n\r\n                                            </fieldset>\r\n                                        </div>\r\n                                    }\r\n                                </div>}\r\n\r\n                            {/* photo and description section */}\r\n                            {(isAddingItem === ADD_AD || isAddingItem === EDIT_AD)\r\n                                && <div className={style.ad__section}>\r\n\r\n                                    <p className={style.ad__title}>Opis:</p>\r\n                                    <div className={style.ad__container}>\r\n\r\n                                        <div className={`${style.ad__itemContainer} ${style.ad__itemContainerWide}`}>\r\n                                            <label className={style.ad__itemDesc}>Tytuł ogłoszenia (10-50 znaków):</label>\r\n                                            <input onChange={event => setAdTitleHandler(event.target.value)} value={adTitle} className={style.ad__itemList} type='text' maxLength=\"50\" />\r\n                                            <p className={style.ad__itemDescValidation} style={adTitleValidation >= 10 ? { color: \"green\" } : null}>{adTitleValidation}</p>\r\n                                        </div>\r\n\r\n\r\n                                        <div className={style.ad__containerPhotos}>\r\n                                            <p className={style.ad__itemContainer}>Zdjęcia:</p>\r\n                                            <div className={style.ad__containerPhotos}>\r\n\r\n\r\n                                                {[...Array(4)].map((item, index) => {\r\n                                                    return (\r\n                                                        <div key={index} className={style.ad__itemContainer}>\r\n                                                            <input\r\n                                                                id={`file${index}`}\r\n                                                                // className=\"\"\r\n                                                                style={{ display: \"none\" }}\r\n                                                                type='file'\r\n                                                                onChange={(e) => getPhoto(e, index)}\r\n                                                                accept='image/*' //image/* = .jpg, .jpeg, .bmp, .svg, .png\r\n                                                            />\r\n                                                            <label htmlFor={`file${index}`} className={` ${style.btn} ${style.ad__itemLabel}`}><img className={style.ad__itemImage} src={imageURL[index] || Photo} alt='podgląd zdjęcia.' /> </label>\r\n                                                            {showProgress[index] &&\r\n                                                                <div className={style.ad__progressContainer}>\r\n                                                                    <progress className={style.ad__progressBar} value={progress} max='100' />\r\n                                                                </div>}\r\n                                                            {(index === 0 && !imageURL[0]) && <p className={style.ad__itemFirstPhotDesc}>Zdjęcie główne</p>}\r\n                                                        </div>\r\n                                                    )\r\n                                                })}\r\n                                            </div>\r\n                                        </div>\r\n\r\n\r\n                                        <div className={`${style.ad__itemContainer} ${style.ad__itemTextArea}`}>\r\n                                            <label className={style.ad__itemDesc}>Opis (50-500 znaków):</label>\r\n                                            <textarea onChange={event => setInputDescriptionHandler(event.target.value)} value={inputDescription} className={style.ad__itemList} type='textarea' rows='8' placeholder=\"Opisz szerzej przedmiot, chcesz zaprezentować.\" maxLength=\"500\" />\r\n                                            <p className={style.ad__itemDescValidation} style={inputDescriptionValidation >= 50 ? { color: \"green\" } : null}>{inputDescriptionValidation}</p>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>}\r\n\r\n\r\n                            {/* meeting data section */}\r\n                            {(isAddingItem === ADD_AD || isAddingItem === EDIT_AD)\r\n                                && <div className={style.ad__section}>\r\n                                    <p className={style.ad__title}>Informacje o spotkaniu:</p>\r\n                                    <div className={style.ad__container}>\r\n\r\n                                        <div className={style.ad__itemContainer}>\r\n                                            <p className={style.ad__itemDesc}>Jak oceniasz swoją wiedzę techniczną.</p>\r\n                                            <select className={style.ad__itemList} onChange={e => setTechKnowledge(e.target.value)} value={techKnowledge}>\r\n                                                {knowledge.map(item => <option key={item} value={item}> {item} </option>)}\r\n                                            </select>\r\n                                            <p className={style.ad__itemDescValidation}>{techKnowledgeValidation}</p>\r\n                                        </div>\r\n\r\n                                        <div className={style.ad__itemContainer}>\r\n                                            <label className={style.ad__itemDesc}>Jaka jest cena za godzinne spotkanie?</label>\r\n                                            <input onChange={event => setPriceOfMeeting(event.target.value)} value={priceOfMeeting} className={style.ad__itemList} type='number' placeholder=\"np. 150\" />\r\n                                            <p className={style.ad__itemDescValidation}>{priceOfMeetingValidation}</p>\r\n                                        </div>\r\n\r\n                                        <div className={style.ad__itemContainer}>\r\n                                            <label className={style.ad__itemDesc}>Opisz preferowaną pore spotkania:</label>\r\n                                            <input onChange={event => setTimeOfDay(event.target.value)} value={timeOfDay} className={style.ad__itemList} type='text' placeholder=\"np. każda sobota i niedziela\" maxLength=\"100\" />\r\n                                            <p className={style.ad__itemDescValidation}>{timeOfDayValidation}</p>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>}\r\n\r\n\r\n                            {/* contact data section */}\r\n                            {(isAddingItem === ADD_AD || isAddingItem === EDIT_AD)\r\n                                && <div className={style.ad__section}>\r\n                                    <p className={style.ad__title}>Twoje dane kontaktowe:</p>\r\n                                    <div className={style.ad__container}>\r\n\r\n                                        <div className={style.ad__itemContainer}>\r\n                                            <p className={style.ad__itemDesc}>Województwo:</p>\r\n                                            <select className={style.ad__itemList} onChange={setRegionChosenChandler} value={regionChosen}>\r\n                                                {regions.map(item => <option key={item} value={item}> {item} </option>)}\r\n                                            </select>\r\n                                            <p className={style.ad__itemDescValidation}>{regionChosenValidation}</p>\r\n                                        </div>\r\n\r\n                                        <div className={style.ad__itemContainer}>\r\n                                            <p className={style.ad__itemDesc}>Miasto:</p>\r\n                                            <select disabled={!regionChosen} className={style.ad__itemList} onChange={e => setCityChosen(e.target.value)} value={cityChosen}>\r\n                                                {cities.filter(item => item.region === regionChosen).map(item => <option key={item.city} value={item.city}> {item.city} </option>)}\r\n                                            </select>\r\n                                            <p className={style.ad__itemDescValidation}>{cityChosenValidation}</p>\r\n                                        </div>\r\n\r\n                                        <div className={style.ad__itemContainer}>\r\n                                            <label className={style.ad__itemDesc}>Imię:</label>\r\n                                            <input onChange={event => setInputName(event.target.value)} value={inputName} className={style.ad__itemList} type='text' placeholder=\"np. Jan\" maxLength=\"10\" />\r\n                                            <p className={style.ad__itemDescValidation}>{inputNameValidation}</p>\r\n                                        </div>\r\n\r\n                                        <div className={style.ad__itemContainer}>\r\n                                            <label className={style.ad__itemDesc}>Adres e-mail (wymagane):</label>\r\n                                            <input onChange={event => setInputEmail(event.target.value)} value={inputEmail} className={style.ad__itemList} type='text' placeholder=\"np. jan@gmail.com\" maxLength=\"50\" />\r\n                                            <p className={style.ad__itemDescValidation}>{inputEmailValidation}</p>\r\n                                        </div>\r\n\r\n                                        <div className={style.ad__itemContainer}>\r\n                                            <label className={style.ad__itemDesc}>Numer telefonu (opcjonalnie):</label>\r\n                                            <input onChange={event => setInputPhone(event.target.value)} value={inputPhone} className={style.ad__itemList} type='phone' placeholder=\"np. 100-200-300\" maxLength=\"11\" />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>}\r\n\r\n                            {/* contact data section */}\r\n                            {(isAddingItem === ADD_AD || isAddingItem === REFRESH_AD)\r\n                                && <div className={style.ad__section}>\r\n                                    <p className={style.ad__title}>Ogłoszenie:</p>\r\n                                    <div className={style.ad__container}>\r\n\r\n                                        <div className={style.ad_checkBoxContainer}>\r\n                                            <p className={style.ad__labelCheckBoxLeftPaddingNull}>Ważność ogłoszenia: </p>\r\n\r\n                                            <input checked={1 === timeValidationAdDayCount} name=\"timeValidationAdDayCount\" value=\"1\" onChange={() => setTimeValidationAdDayCount(1)} className={style.ad__inputCheckBox} type='radio' />\r\n                                            <label className={style.ad__labelRadiokBox}>1 dzień</label>\r\n\r\n                                            <input checked={14 === timeValidationAdDayCount} name=\"timeValidationAdDayCount\" value=\"14\" onChange={() => setTimeValidationAdDayCount(14)} className={style.ad__inputCheckBox} type='radio' />\r\n                                            <label className={style.ad__labelRadiokBox}>14 dni</label>\r\n\r\n                                            <input checked={30 === timeValidationAdDayCount} name=\"timeValidationAdDayCount\" value=\"30\" onChange={() => setTimeValidationAdDayCount(30)} className={style.ad__inputCheckBox} type='radio' />\r\n                                            <label className={style.ad__labelRadiokBox}>30 dni</label>\r\n                                        </div>\r\n\r\n                                        <div className={style.ad_checkBoxContainer}>\r\n                                            <input onChange={event => setIsPromoted(event.target.checked ? true : false)} className={style.ad__inputCheckBox} type='checkbox' checked={isPromoted} />\r\n                                            <label className={style.ad__labelCheckBox}><b>{`Kup promowanie ogłoszenia. Koszt ${timeValidationAdDayCount === 30 ? 2 : 1}zł.`}</b></label>\r\n                                        </div>\r\n\r\n                                        <div className={style.ad_checkBoxContainer}>\r\n                                            <input onChange={event => setInputAgreenent(event.target.checked ? true : false)} className={`${style.ad__inputCheckBox} ${inputAgreenentValidation && style.ad__inputCheckBoxValidation}`} type='checkbox' checked={inputAgreenent} />\r\n                                            <label className={style.ad__labelCheckBox}>Zapoznałem się i akceptuję <a href=\"/privacy-policy\">regulamin serwisu</a> oraz <a href=\"/privacy-policy\">politykę prywatności</a>.</label>\r\n                                            <p className={style.ad__itemDescValidation}>{inputAgreenentValidation}</p>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>}\r\n\r\n\r\n                            <div className={style.btnContainer}>\r\n                                <button className={`${style.btn} ${style.btnMmargin}`} onClick={cancelForm}>Anuluj</button>\r\n                                <button className={style.btn} onClick={handleReadyAd}>OK</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    }\r\n\r\n\r\n                </div>\r\n            </section >\r\n\r\n            // user log out\r\n            : <LoginRegisterFirebaseUI />\r\n    )\r\n}\r\n\r\nexport default User\r\n","D:\\JS\\_projects\\jatestuje\\src\\components\\UserAds\\UserAds.js",[],"D:\\JS\\_projects\\jatestuje\\src\\components\\Home\\Home.js",[],"D:\\JS\\_projects\\jatestuje\\src\\components\\Ad\\Ad.js",[],"D:\\JS\\_projects\\jatestuje\\src\\components\\Nav\\Nav.js",[],"D:\\JS\\_projects\\jatestuje\\src\\UI\\AlertPrivacy\\AlertPrivacy.js",[],"D:\\JS\\_projects\\jatestuje\\src\\components\\Regulations\\Regulations.js",[],"D:\\JS\\_projects\\jatestuje\\src\\components\\Contact\\Contact.js",[],"D:\\JS\\_projects\\jatestuje\\src\\components\\PrivacyPolicy\\PrivacyPolicy.js",[],"D:\\JS\\_projects\\jatestuje\\src\\components\\Footer\\Footer.js",[],"D:\\JS\\_projects\\jatestuje\\src\\components\\User\\LoginRegisterFirebaseUI\\LoginRegisterFirebaseUI.js",[],"D:\\JS\\_projects\\jatestuje\\src\\UI\\AlertSmall\\AlertSmall.js",[],"D:\\JS\\_projects\\jatestuje\\src\\components\\ListItemAd\\ListItemAd.js",[],"D:\\JS\\_projects\\jatestuje\\src\\UI\\Alert\\Alert.js",[],"D:\\JS\\_projects\\jatestuje\\src\\UI\\Spinner\\Spinner.js",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":776,"column":11,"nodeType":"97","messageId":"98","endLine":776,"endColumn":30},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-unused-vars","'getFAKEDataFromForm' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]