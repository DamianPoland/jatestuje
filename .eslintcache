[{"D:\\JS\\_projects\\jatestuje\\src\\index.js":"1","D:\\JS\\_projects\\jatestuje\\src\\reportWebVitals.js":"2","D:\\JS\\_projects\\jatestuje\\src\\containers\\App\\App.js":"3","D:\\JS\\_projects\\jatestuje\\src\\components\\Footer\\Footer.js":"4","D:\\JS\\_projects\\jatestuje\\src\\components\\Nav\\Nav.js":"5","D:\\JS\\_projects\\jatestuje\\src\\components\\Home\\Home.js":"6","D:\\JS\\_projects\\jatestuje\\src\\shared\\fire.js":"7","D:\\JS\\_projects\\jatestuje\\src\\shared\\constans.js":"8","D:\\JS\\_projects\\jatestuje\\src\\UI\\AlertSmall\\AlertSmall.js":"9","D:\\JS\\_projects\\jatestuje\\src\\UI\\Alert\\Alert.js":"10","D:\\JS\\_projects\\jatestuje\\src\\UI\\Spinner\\Spinner.js":"11","D:\\JS\\_projects\\jatestuje\\src\\UI\\AlertPrivacy\\AlertPrivacy.js":"12","D:\\JS\\_projects\\jatestuje\\src\\components\\PrivacyPolicy\\PrivacyPolicy.js":"13","D:\\JS\\_projects\\jatestuje\\src\\components\\User\\User.js":"14","D:\\JS\\_projects\\jatestuje\\src\\components\\User\\LoginRegisterFirebaseUI\\LoginRegisterFirebaseUI.js":"15","D:\\JS\\_projects\\jatestuje\\src\\shared\\data.js":"16","D:\\JS\\_projects\\jatestuje\\src\\components\\Ad\\Ad.js":"17","D:\\JS\\_projects\\jatestuje\\src\\components\\UserAds\\UserAds.js":"18","D:\\JS\\_projects\\jatestuje\\src\\components\\Contact\\Contact.js":"19","D:\\JS\\_projects\\jatestuje\\src\\components\\Regulations\\Regulations.js":"20","D:\\JS\\_projects\\jatestuje\\src\\components\\ListItemAd\\ListItemAd.js":"21"},{"size":515,"mtime":1611559356968,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"23"},{"size":2285,"mtime":1613682926749,"results":"25","hashOfConfig":"23"},{"size":2180,"mtime":1613045448479,"results":"26","hashOfConfig":"23"},{"size":2494,"mtime":1613484158302,"results":"27","hashOfConfig":"23"},{"size":13904,"mtime":1613658604621,"results":"28","hashOfConfig":"23"},{"size":1252,"mtime":1613689814117,"results":"29","hashOfConfig":"23"},{"size":291,"mtime":1613659168691,"results":"30","hashOfConfig":"23"},{"size":2429,"mtime":1606299266075,"results":"31","hashOfConfig":"23"},{"size":2122,"mtime":1603695166114,"results":"32","hashOfConfig":"23"},{"size":346,"mtime":1599650450834,"results":"33","hashOfConfig":"23"},{"size":1400,"mtime":1605265466971,"results":"34","hashOfConfig":"23"},{"size":13579,"mtime":1611739019188,"results":"35","hashOfConfig":"23"},{"size":44312,"mtime":1613668871076,"results":"36","hashOfConfig":"23"},{"size":2852,"mtime":1612357951575,"results":"37","hashOfConfig":"23"},{"size":88560,"mtime":1613422492753,"results":"38","hashOfConfig":"23"},{"size":9927,"mtime":1613483377596,"results":"39","hashOfConfig":"23"},{"size":2485,"mtime":1613492501459,"results":"40","hashOfConfig":"23"},{"size":9269,"mtime":1613634829159,"results":"41","hashOfConfig":"23"},{"size":334,"mtime":1613045561712,"results":"42","hashOfConfig":"23"},{"size":1438,"mtime":1613497935637,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"yzuu5a",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"D:\\JS\\_projects\\jatestuje\\src\\index.js",[],["89","90"],"D:\\JS\\_projects\\jatestuje\\src\\reportWebVitals.js",[],"D:\\JS\\_projects\\jatestuje\\src\\containers\\App\\App.js",[],"D:\\JS\\_projects\\jatestuje\\src\\components\\Footer\\Footer.js",[],"D:\\JS\\_projects\\jatestuje\\src\\components\\Nav\\Nav.js",[],"D:\\JS\\_projects\\jatestuje\\src\\components\\Home\\Home.js",["91"],"import React, { useState, useEffect } from 'react'\r\nimport style from './Home.module.css'\r\nimport { firestore } from '../../shared/fire'\r\n\r\n// data\r\nimport { mainCategories, fuel, yearFrom, yearTo, gearbox, regions, cities } from '../../shared/data'\r\n\r\n//component\r\nimport ListItemAd from '../ListItemAd/ListItemAd'\r\n\r\n\r\n\r\n\r\n\r\nconst Home = props => {\r\n\r\n    // ----------------------- START CATEGORIES --------------------------//\r\n\r\n\r\n    // STATE - set mainCategory\r\n    const [mainCategory, setMainCategory] = useState(mainCategories[0].nameDB)\r\n\r\n\r\n    // call when click new category\r\n    const mainCategoryHandler = (nameDB) => {\r\n\r\n        // reset array\r\n        setAllAds([])\r\n\r\n        //set new category\r\n        setMainCategory(nameDB)\r\n\r\n        //clear all states\\\r\n        setCarIdChosen(\"\")\r\n        setCarModelChosen(\"\")\r\n        setFuelChosen(\"\")\r\n        setYearFromChosen(\"\")\r\n        setYearToChosen(\"\")\r\n        setGearboxChosen(\"\")\r\n        setTypeChosen(\"\")\r\n    }\r\n\r\n    // ----------------------- STOP CATEGORIES --------------------------//\r\n\r\n\r\n    // ----------------------- START FILTERS --------------------------//\r\n\r\n    // STATE - set region\r\n    const [regionChosen, setRegionChosen] = useState(\"\")\r\n\r\n    // STATE - set city\r\n    const [cityChosen, setCityChosen] = useState(\"\")\r\n\r\n    // STATE - set car id (name)\r\n    const [carIdChosen, setCarIdChosen] = useState(\"\")\r\n\r\n    // STATE - set car model\r\n    const [carModelChosen, setCarModelChosen] = useState(\"\")\r\n\r\n    // STATE - set fuel\r\n    const [fualChosen, setFuelChosen] = useState(\"\")\r\n\r\n    // STATE - set year from\r\n    const [yearFromChosen, setYearFromChosen] = useState(\"\")\r\n\r\n    // STATE - set year to\r\n    const [yearToChosen, setYearToChosen] = useState(\"\")\r\n\r\n    // STATE - set gearbox\r\n    const [gearboxChosen, setGearboxChosen] = useState(\"\")\r\n\r\n    // STATE - set type\r\n    const [typeChosen, setTypeChosen] = useState(\"\")\r\n\r\n\r\n\r\n    // set Regions on Change\r\n    const setRegionChosenChandler = e => {\r\n        setRegionChosen(e.target.value)\r\n        setCityChosen(\"\") // reset city when region change\r\n    }\r\n\r\n    // set Car ID on Change\r\n    const setCarIdChosenChandler = e => {\r\n        setCarIdChosen(e.target.value)\r\n        setCarModelChosen(\"\") // reset model when Car ID change\r\n    }\r\n\r\n\r\n    // filter ads\r\n    const filterAds = () => {\r\n\r\n\r\n        // filters arguments list TODO\r\n\r\n\r\n\r\n\r\n        const filterArgList = [regionChosen, cityChosen, carIdChosen, carModelChosen, fualChosen, yearFromChosen, yearToChosen, gearboxChosen, typeChosen]\r\n\r\n        console.log(\"filtrowanie, lista: \", filterArgList);\r\n    }\r\n\r\n    // ----------------------- STOP FILTERS --------------------------//\r\n\r\n\r\n\r\n\r\n    // ----------------------- START ADS  --------------------------//\r\n\r\n    // STATE - set ALL ADS\r\n    const [allAds, setAllAds] = useState([])\r\n\r\n    // load ads from DB first time\r\n    useEffect(() => {\r\n\r\n        // start query\r\n        queryToDB()\r\n\r\n    }, [mainCategory])\r\n\r\n\r\n    // query to DB for items\r\n    const queryToDB = async () => {\r\n\r\n        //set query constructor\r\n        const queryConstructor = firestore.collection(mainCategory)\r\n\r\n\r\n\r\n        console.log(mainCategory);\r\n\r\n\r\n        //  custom filters TODO\r\n\r\n\r\n        // .where(\"regionChosen\", \"==\", \"pomorskie\")\r\n        // .where(\"carIdChosen\", \"==\", \"bmw\")\r\n\r\n\r\n\r\n        try {\r\n\r\n            const query = await queryConstructor\r\n\r\n                // main filters\r\n                // .where(\"isApproved\", \"==\", true) // only approwed ads\r\n                .orderBy(\"adDate\", 'desc') // sort in field adDate, 'desc' reverse table and get items from DB from end\r\n                .startAfter(allAds.length !== 0 ? allAds[allAds.length - 1].adDate : (new Date().getTime()) + 86400000 * 30) // get ads from last displayed or newest (month in future 86400000 * 30) according to field adDate\r\n                .limit(2) // how many items be loaded from DB on one time\r\n                .get()\r\n\r\n            query.forEach(doc => {\r\n\r\n                // show ONLY ads valid, not older than today\r\n                //if (doc.data().adDate <= (new Date().getTime())) { return }\r\n\r\n                // save  ad in State\r\n                setAllAds(prevState => [...prevState, doc.data()])\r\n\r\n                // promoted ad put extra on top, change id because Each child in a list should have a unique \"key\"\r\n                if (doc.data().isPromoted === true) {\r\n                    const item = { ...doc.data() }\r\n                    item.id = `${item.id} ` // add only space because can't change url in browser to ad\r\n                    setAllAds(prevState => [item, ...prevState])\r\n                }\r\n            })\r\n        } catch (err) { console.log('err get ads', err) }\r\n    }\r\n\r\n    // ----------------------- STOP ADS  --------------------------//\r\n\r\n\r\n\r\n    return (\r\n        <section className={style.background}>\r\n            <div className={style.container}>\r\n\r\n                {/* DESCRIPTION */}\r\n                <div className={style.description}>\r\n\r\n                    <p className={style.description__title}>O co chodzi ... ?</p>\r\n                    <div className={style.description__textContainer}>\r\n                        <p className={style.description__text}><strong>Szukasz samochodu, motocykla, maszyny lub urzadzenia elektronicznego</strong> ale nie wiesz jaki model będzie dla Ciebie odpowiedni? <strong>Testuj różne modele</strong>, zasięgnij opinii właścicieli i <strong>dokonaj świadomego wyboru.</strong></p>\r\n                        <p className={style.description__text}><strong>Masz już samochód lub jakieś urządzenie elektroniczne?</strong> Pokaż innym i przy okazji <strong>możesz zarobić</strong>. Dodaj go do bazy i czekaj na zgłoszenie. Pokażesz swóją własność, opowiesz o niej i dostaniesz za to wcześniej ustaloną kwotę.</p>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* MAIN CATEGORY */}\r\n                <div className={style.categories}>\r\n                    <p className={style.title}>Kategorie</p>\r\n                    <div className={style.categories__container}>\r\n                        {mainCategories.map(item => {\r\n                            return (\r\n                                <div key={item.nameDB} className={`${style.categories__itemContainer} ${(mainCategory === item.nameDB) && style.categories__itemContainerActive}`} onClick={() => mainCategoryHandler(item.nameDB)}>\r\n                                    <figure className={style.categories__itemFigure}>\r\n                                        <img className={style.categories__itemImg} src={item.photo} alt=\"main\" />\r\n                                    </figure>\r\n                                    <p className={style.categories__itemDesc}>{item.name}</p>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* FILTERS */}\r\n                <div className={style.filter}>\r\n                    <p className={style.title}>Filtry</p>\r\n                    <div className={style.filter_container}>\r\n\r\n                        <div className={style.filter__itemContainer}>\r\n                            {/* Filter region */}\r\n                            <div className={style.filter__itemContainerSmall}>\r\n                                <p className={style.filter__itemDesc}>Województwo:</p>\r\n                                <select className={style.filter__itemList} onChange={setRegionChosenChandler}>\r\n                                    {regions.map(item => <option key={item} value={item}> {item} </option>)}\r\n                                </select>\r\n                            </div>\r\n                            {/* Filter city */}\r\n                            <div className={style.filter__itemContainerSmall}>\r\n                                <p className={style.filter__itemDesc}>Miasto:</p>\r\n                                <select className={style.filter__itemList} onChange={e => setCityChosen(e.target.value)}>\r\n                                    {cities.filter(item => item.region === regionChosen).map(item => <option key={item.city} value={item.city}> {item.city} </option>)}\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        {/* Filter cars car brand */}\r\n                        < div className={style.filter__itemContainer}>\r\n                            {mainCategory === mainCategories[0].nameDB\r\n                                &&\r\n                                <div className={style.filter__itemContainerForCar}>\r\n                                    {/* Filter cars id (name) */}\r\n                                    <div className={style.filter__itemContainerSmall}>\r\n                                        <p className={style.filter__itemDesc}>Marka:</p>\r\n                                        <select className={style.filter__itemList} onChange={setCarIdChosenChandler}>\r\n                                            {mainCategories[0].carBrands.map(item => <option key={item.id} value={item.id}>{item.name}</option>)}\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    {/* Filter cars model */}\r\n                                    <div className={style.filter__itemContainerSmall}>\r\n                                        <p className={style.filter__itemDesc}>Model:</p>\r\n                                        <select className={style.filter__itemList} onChange={e => setCarModelChosen(e.target.value)}>\r\n                                            {mainCategories[0].carBrands.find(item => item.id === carIdChosen).models.map(item => <option key={item} value={item}>{item}</option>)}\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    {/* Filter fuel */}\r\n                                    <div className={style.filter__itemContainerSmall}>\r\n                                        <p className={style.filter__itemDesc}>Paliwo:</p>\r\n                                        <select className={style.filter__itemList} onChange={e => setFuelChosen(e.target.value)}>\r\n                                            {fuel.map(item => <option key={item} value={item}>{item}</option>)}\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    {/* Filter year */}\r\n                                    <div className={style.filter__itemContainerSmall}>\r\n                                        <p className={style.filter__itemDesc}>Rok produkcji:</p>\r\n                                        <div className={style.filter__itemContainerItems}>\r\n                                            <select className={style.filter__itemList} onChange={e => setYearFromChosen(e.target.value)}>\r\n                                                {yearFrom.map(item => <option key={item} value={item}>{item}</option>)}\r\n                                            </select>\r\n                                            <select className={style.filter__itemList} onChange={e => setYearToChosen(e.target.value)}>\r\n                                                {yearTo.map(item => <option key={item} value={item}>{item}</option>)}\r\n                                            </select>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* Filter gearbox */}\r\n                                    <div className={style.filter__itemContainerSmall}>\r\n                                        <p className={style.filter__itemDesc}>Skrzynia biegów:</p>\r\n                                        <select className={style.filter__itemList} onChange={e => setGearboxChosen(e.target.value)}>\r\n                                            {gearbox.map(item => <option key={item} value={item}>{item}</option>)}\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n\r\n                            {/* Filter type */}\r\n                            <div className={style.filter__itemContainerSmall}>\r\n                                <p className={style.filter__itemDesc}>Typ:</p>\r\n                                <select className={style.filter__itemList} onChange={e => setTypeChosen(e.target.value)}>\r\n                                    {mainCategories.find(i => mainCategory === i.nameDB).type.map(item => <option key={item} value={item}>{item}</option>)}\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className={style.btnContainer}>\r\n                            <button className={style.btn} onClick={filterAds}>Filtruj</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* ALL ADS */}\r\n                <div className={style.ads}>\r\n                    <p className={style.title}>Ogłoszenia</p>\r\n\r\n                    {allAds.length !== 0\r\n                        ? <div>\r\n                            {allAds.map((item) => {\r\n                                return (\r\n                                    <ListItemAd key={item.id} item={item} />\r\n                                )\r\n                            })\r\n                            }\r\n\r\n                            <button onClick={queryToDB}>następne</button>\r\n                        </div>\r\n\r\n                        : <p>brak</p>\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </section >\r\n    )\r\n}\r\n\r\nexport default Home\r\n\r\n\r\n\r\n","D:\\JS\\_projects\\jatestuje\\src\\shared\\fire.js",[],"D:\\JS\\_projects\\jatestuje\\src\\shared\\constans.js",[],"D:\\JS\\_projects\\jatestuje\\src\\UI\\AlertSmall\\AlertSmall.js",[],"D:\\JS\\_projects\\jatestuje\\src\\UI\\Alert\\Alert.js",[],"D:\\JS\\_projects\\jatestuje\\src\\UI\\Spinner\\Spinner.js",[],"D:\\JS\\_projects\\jatestuje\\src\\UI\\AlertPrivacy\\AlertPrivacy.js",[],"D:\\JS\\_projects\\jatestuje\\src\\components\\PrivacyPolicy\\PrivacyPolicy.js",[],"D:\\JS\\_projects\\jatestuje\\src\\components\\User\\User.js",["92"],"import React, { useState, useEffect } from 'react'\r\nimport style from './User.module.css'\r\n\r\n// image compression library\r\nimport imageCompression from 'browser-image-compression';\r\n\r\n\r\n//components\r\nimport LoginRegisterFirebaseUI from './LoginRegisterFirebaseUI/LoginRegisterFirebaseUI'\r\nimport { ReactComponent as Ad } from '../../assets/ad.svg'\r\nimport AlertSmall from \"../../UI/AlertSmall/AlertSmall\";\r\n\r\n//data \r\nimport { mainCategories, fuel, years, gearbox, carEquipment, mileage, regions, cities, knowledge } from '../../shared/data'\r\n\r\n//photos\r\nimport Photo from '../../assets/photo.png'\r\nimport PhotoEmpty from '../../assets/photoEmpty.png'\r\n\r\n//firebase\r\nimport firebase from \"firebase/app\"\r\nimport { auth, firestore, storage, functions } from '../../shared/fire'\r\n\r\n\r\n// constans\r\nimport { IS_AUTH, USER_NAME, ADS, USERS } from '../../shared/constans'\r\n\r\n\r\n\r\n// delete all images and folder from DB\r\nconst deleteImagesAndFolderFromDB = (isAdingItem) => {\r\n    const ref = storage.ref(`images/${localStorage.getItem(IS_AUTH)}/${isAdingItem}`)\r\n    ref.listAll()\r\n        .then(resp => {\r\n            resp.items.forEach(fileRef => {\r\n                storage.ref(fileRef.fullPath).getDownloadURL()\r\n                    .then(url => {\r\n                        storage.refFromURL(url).delete()\r\n                            .then(() => console.log(\"deleted ad from storage\"))\r\n                            .catch(error => console.log(\"error deletion, error: \", error))\r\n                    })\r\n            })\r\n        })\r\n        .catch(error => console.log(error))\r\n}\r\n\r\n\r\n// set equimpment array\r\nlet equipmentChosen = []\r\n\r\n\r\n//days text converter\r\nconst dayTextConverter = (adDate) => {\r\n    const dateDifference = Math.floor((adDate - new Date().getTime()) / 86400000)\r\n    if (dateDifference > 1) { return ` ${dateDifference} dni.` }\r\n    else if (dateDifference === 1) { return ` jeden dzień.` }\r\n    else { return ` mniej niż jeden dzień.` }\r\n}\r\n\r\n\r\nconst User = () => {\r\n\r\n    // force snapShot update after change data in DB in ad isPromoted\r\n    const [snapshotUpdate, setSnapshotUpdate] = useState(true)\r\n\r\n    // show or hide small alert\r\n    const [isAlertSmallShow, setIsAlertSmallShow] = useState(false)\r\n\r\n\r\n    // ----------------------- START USER VIEW  --------------------------//\r\n\r\n\r\n    // STATE - set user ADS\r\n    const [userAds, setUserAds] = useState([])\r\n\r\n    // start/stop listener for user ads\r\n    useEffect(() => {\r\n\r\n        // if user is not sign in then not start listener\r\n        if (!localStorage.getItem(IS_AUTH)) {\r\n            return\r\n        }\r\n\r\n        // listener for collection\r\n        const listener = firestore.collection(USERS).doc(localStorage.getItem(IS_AUTH)).collection(ADS).onSnapshot( //have two arguments which are functions\r\n            resp => {\r\n\r\n                //clear ads list before load\r\n                setUserAds([])\r\n\r\n                resp.forEach(doc => {\r\n\r\n                    // if no data then stop\r\n                    if (Object.keys(doc.data()).length === 0) {\r\n                        return\r\n                    }\r\n\r\n                    // change object to array\r\n                    const dataArray = Object.values(doc.data())\r\n\r\n\r\n                    dataArray.forEach(item => {\r\n\r\n                        //get collection name as main category\r\n                        const collectionName = item.split(\" \")[0]\r\n\r\n                        // get ad with itemID from DB and save in State\r\n                        firestore.collection(collectionName).doc(item).get()\r\n                            .then(resp => {\r\n\r\n                                // if response is not undefined\r\n                                resp.data() && setUserAds(prevState => [...prevState, resp.data()])\r\n                            })\r\n                            .catch(err => console.log('listener err', err))\r\n                    })\r\n\r\n\r\n                })\r\n            },\r\n            err => console.log(err.message))\r\n\r\n        return () => {\r\n            listener() // clean up listener\r\n        }\r\n    }, [snapshotUpdate])\r\n\r\n\r\n    // edit one ad in DB\r\n    const editItemFromDB = (e, item) => {\r\n\r\n        console.log(\"not ready editItemFromDB\")\r\n        setIsAlertSmallShow({ alertIcon: 'info', description: 'Not ready', animationTime: '2', borderColor: 'orange' })\r\n\r\n        // TODO move to backend\r\n    }\r\n\r\n\r\n    // refresh one ad in DB\r\n    const refreshItemFromDB = (e, item) => {\r\n\r\n        // refresh ad - call backend\r\n        const refreshAd = functions.httpsCallable('refreshAd')\r\n        refreshAd({ item: item })\r\n            .then(resp => {\r\n\r\n                // update snapShot after ad refresh\r\n                setSnapshotUpdate(prevState => !prevState)\r\n\r\n                // show alert\r\n                setIsAlertSmallShow({ alertIcon: 'OK', description: 'Przedłużono ważność ogłoszenia.', animationTime: '2', borderColor: 'green' })\r\n                console.log(\"DB response refresh: \", resp.data)\r\n            })\r\n            .catch(err => {\r\n\r\n                // show alert\r\n                setIsAlertSmallShow({ alertIcon: 'error', description: 'Błąd. Spróbuj ponownie później.', animationTime: '2', borderColor: 'red' })\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n\r\n    // delete one ad from DB\r\n    const deleteItemFromDB = (e, item) => {\r\n\r\n        // 1. delete one ad from DB STORAGE with images\r\n        deleteImagesAndFolderFromDB(item.id)\r\n\r\n        // 2. delete one ad from DB FIRESTORE in specyfic folder\r\n        firestore.collection(item.mainCategory).doc(item.id).delete()\r\n            .then(() => console.log(`deleted ad from ${item.mainCategory}`))\r\n\r\n            // 3. delete one ad from DB FIRESTORE in users folder\r\n            .then(() => firestore.collection(USERS).doc(localStorage.getItem(IS_AUTH)).collection(ADS).doc(ADS).update({ [item.id]: firebase.firestore.FieldValue.delete() }))\r\n            .then(() => console.log(`deleted ad from ${USERS}`))\r\n            .catch(err => console.log(' delete err', err))\r\n    }\r\n\r\n\r\n    // ----------------------- STOP USER VIEW  --------------------------//\r\n\r\n\r\n    // ----------------------- START ADD ITEM --------------------------//\r\n\r\n    // STATE - is Adding Item\r\n    const [isAddingItem, setIsAddingItem] = useState(false)\r\n\r\n    // STATE - set mainCategory\r\n    const [mainCategory, setMainCategory] = useState(mainCategories[0].nameDB)\r\n\r\n    // STATE - set ad Id\r\n    const [id, setId] = useState(\"\")\r\n\r\n    // STATE - set type\r\n    const [typeChosen, setTypeChosen] = useState(\"\")\r\n\r\n    // STATE - set year from\r\n    const [yearChosen, setYearChosen] = useState(\"\")\r\n\r\n    // STATE - input Title\r\n    const [adTitle, setAdTitle] = useState('') // input value\r\n\r\n    // STATE - input Image\r\n    const [image, setImage] = useState([null, null, null, null]) // input image value\r\n    const [imageURL, setImageURL] = useState([null, null, null, null]) // write URL from DB\r\n    const [smallImageURL, setSmallImageURL] = useState(\"\") // write URL from DB\r\n    const [progress, setProgress] = useState(0) // progress bar\r\n    const [showProgress, setShowProgress] = useState([false, false, false, false]) // set progress visibility\r\n\r\n\r\n\r\n\r\n    // STATE - input Description\r\n    const [inputDescription, setInputDescription] = useState('') // input value\r\n\r\n    // STATE - set technical knowlage\r\n    const [techKnowledge, setTechKnowledge] = useState(\"\")\r\n\r\n    // STATE - set price of meeting\r\n    const [priceOfMeeting, setPriceOfMeeting] = useState(\"\")\r\n\r\n    // STATE - set day time to meeting\r\n    const [timeOfDay, setTimeOfDay] = useState(\"\")\r\n\r\n    // STATE - set region\r\n    const [regionChosen, setRegionChosen] = useState(\"\")\r\n\r\n    // STATE - set city\r\n    const [cityChosen, setCityChosen] = useState(\"\")\r\n\r\n    // STATE - input Name\r\n    const [inputName, setInputName] = useState('') // input value\r\n\r\n    // STATE - input Email\r\n    const [inputEmail, setInputEmail] = useState('') // input value\r\n\r\n    // STATE - input Phone\r\n    const [inputPhone, setInputPhone] = useState('') // input value\r\n\r\n    // STATE - input isPromoted\r\n    const [isPromoted, setIsPromoted] = useState(false) // input value\r\n\r\n    // STATE - input Agreenent\r\n    const [inputAgreenent, setAgreenent] = useState(false) // input value\r\n\r\n\r\n\r\n    // CATEGORY CAR ONLY\r\n\r\n    // STATE - set car id (name)\r\n    const [carIdChosen, setCarIdChosen] = useState(\"\")\r\n\r\n    // STATE - set car model\r\n    const [carModelChosen, setCarModelChosen] = useState(\"\")\r\n\r\n    // STATE - set fuel\r\n    const [fuelChosen, setFuelChosen] = useState(\"\")\r\n\r\n    // STATE - set gearbox\r\n    const [gearboxChosen, setGearboxChosen] = useState(\"\")\r\n\r\n    // STATE - set mileage\r\n    const [mileageChosen, setMileageChosen] = useState(\"\")\r\n\r\n    // STATE - set capacity\r\n    const [capacityChosen, setCapacityChosen] = useState(\"\")\r\n\r\n    // STATE - set power\r\n    const [powerChosen, setPowerChosen] = useState(\"\")\r\n\r\n\r\n    // scroll to top when start/stop form\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0)\r\n    }, [isAddingItem])\r\n\r\n    // show form when click +\r\n    const showForm = () => {\r\n\r\n        //show form\r\n        setIsAddingItem(true)\r\n    }\r\n\r\n    // call when click new category\r\n    const mainCategoryHandler = (nameDB) => {\r\n\r\n        // delete photos from DB STORAGE with images\r\n        deleteImagesAndFolderFromDB(id)\r\n        setImage(image.map(() => null)) // clear image holder\r\n        setImageURL(imageURL.map(() => null)) // clear image URL holder\r\n\r\n        //set new category\r\n        setMainCategory(nameDB)\r\n\r\n        //clear all form data\r\n        setTypeChosen(\"\")\r\n        setCarIdChosen(\"\")\r\n        setCarModelChosen(\"\")\r\n        setFuelChosen(\"\")\r\n        setGearboxChosen(\"\")\r\n        setMileageChosen(\"\")\r\n        setCapacityChosen(\"\")\r\n        setPowerChosen(\"\")\r\n        equipmentChosen = []\r\n    }\r\n\r\n\r\n    // clear all data from form, clear photos from storage and close item form\r\n    const cancelForm = () => {\r\n\r\n        // delete photos from DB STORAGE with images\r\n        deleteImagesAndFolderFromDB(id)\r\n\r\n        // clear all data from form and close item form\r\n        clearAllDataFromFormAndClose()\r\n    }\r\n\r\n    // clear all data from form and close item form\r\n    const clearAllDataFromFormAndClose = () => {\r\n\r\n        //all categories\r\n        setMainCategory(mainCategories[0].nameDB)\r\n        // setId(\"\") - NOT clear that - can't be empty - auto generate when main category change\r\n        setTypeChosen(\"\")\r\n        setYearChosen(\"\")\r\n        setAdTitle(\"\")\r\n        setImage(image.map(() => null)) // clear image holder\r\n        setImageURL(imageURL.map(() => null)) // clear image URL holder\r\n        setInputDescription(\"\")\r\n        setTechKnowledge(\"\")\r\n        setPriceOfMeeting(\"\")\r\n        setTimeOfDay(\"\")\r\n        setRegionChosen(\"\")\r\n        setCityChosen(\"\")\r\n        setInputName(\"\")\r\n        setInputEmail(\"\")\r\n        setInputPhone(\"\")\r\n        setAgreenent(false)\r\n\r\n        // only car category\r\n        setCarIdChosen(\"\")\r\n        setCarModelChosen(\"\")\r\n        setFuelChosen(\"\")\r\n        setGearboxChosen(\"\")\r\n        setMileageChosen(\"\")\r\n        setCapacityChosen(\"\")\r\n        setPowerChosen(\"\")\r\n        equipmentChosen = []\r\n\r\n        // close item form\r\n        setIsAddingItem(false)\r\n    }\r\n\r\n    // generate new unique id of ad\r\n    useEffect(() => {\r\n        idGenerator()\r\n    }, [mainCategory])\r\n\r\n    // generate new unique id of ad\r\n    const idGenerator = () => {\r\n\r\n        //first part of id is DB name +  data + random string\r\n        const idGenerator = mainCategory + ' ' + new Date().getFullYear() + '-' + (new Date().getMonth() + 1) + '-' + new Date().getDate() + ' ' + new Date().getHours() + ':' + new Date().getMinutes() + ':' + new Date().getSeconds() + ':' + new Date().getMilliseconds() + ' ' + Math.random().toString(36).substr(2)\r\n        setId(idGenerator)\r\n        console.log(\"id: \", idGenerator);\r\n    }\r\n\r\n    // set Regions on Change\r\n    const setRegionChosenChandler = e => {\r\n        setRegionChosen(e.target.value)\r\n        setCityChosen(\"\") // reset city when region change\r\n    }\r\n\r\n    // set Car ID on Change\r\n    const setCarIdChosenChandler = e => {\r\n        setCarIdChosen(e.target.value)\r\n        setCarModelChosen(\"\") // reset model when Car ID change\r\n    }\r\n\r\n    // push or pull equipment item\r\n    const equipmentOnChangeHandler = (item, isChecked) => {\r\n        isChecked ? equipmentChosen.push(item) : equipmentChosen.splice(equipmentChosen.findIndex(i => i === item), 1)\r\n    }\r\n\r\n    // get photo from file/camera\r\n    const getPhoto = (e, index) => {\r\n        setImage(prevState => {\r\n            let helpArray = [...prevState]\r\n            helpArray[index] = e.target.files[0]\r\n            return helpArray\r\n        })\r\n    }\r\n\r\n\r\n    // add image 0 to DB and show to user\r\n    useEffect(() => {\r\n        addImgToDB(image[0], 0)\r\n        addImgToDB(image[0], -1, 0.05, 160) //index -1 is for smallImageURL\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [image[0]])\r\n\r\n    // add image 1 to DB and show to user\r\n    useEffect(() => {\r\n        addImgToDB(image[1], 1)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [image[1]])\r\n\r\n    // add image 2 to DB and show to user\r\n    useEffect(() => {\r\n        addImgToDB(image[2], 2)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [image[2]])\r\n\r\n    // add image 3 to DB and show to user\r\n    useEffect(() => {\r\n        addImgToDB(image[3], 3)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [image[3]])\r\n\r\n\r\n    // add image to DB and show to user, index -1 is for smallImageURL\r\n    const addImgToDB = async (image, index, maxSizeMB = 0.5, maxWidthOrHeight = \"1280\") => {\r\n\r\n        // if image is empty then return\r\n        if (!image) {\r\n            return\r\n        }\r\n\r\n        // set progress bar visibile if index !== -1 => index -1 is for smallImageURL\r\n        if (index !== -1) {\r\n            setShowProgress(prevState => {\r\n                let helpArray = [...prevState]\r\n                helpArray[index] = true\r\n                return helpArray\r\n            })\r\n        }\r\n\r\n\r\n        // check image size, if more than 0.5MB or for smallImageURL then compress photo\r\n        if (image.size >= 1048576 / 2 || (index === -1)) {\r\n\r\n            // compression options\r\n            const options = {\r\n                maxSizeMB: maxSizeMB, // in MB\r\n                maxWidthOrHeight: maxWidthOrHeight, // in px\r\n                useWebWorker: true\r\n            }\r\n\r\n            // start compression\r\n            try {\r\n                image = await imageCompression(image, options)\r\n\r\n            } catch (error) {\r\n\r\n                // set progress bar invisibile\r\n                console.log(\"compression error message: \", error.message)\r\n                setProgress(0)\r\n                setShowProgress(prevState => {\r\n                    let helpArray = [...prevState]\r\n                    helpArray[index] = false\r\n                    return helpArray\r\n                })\r\n\r\n                // return to not save in DB\r\n                return\r\n            }\r\n        }\r\n\r\n        console.log(\"image.size: \", image.size / 1000 + \" kB\");\r\n\r\n        // send photo to DB\r\n        const uploadTask = storage.ref(`images/${localStorage.getItem(IS_AUTH)}/${id}/${index}`).put(image)\r\n        uploadTask.on('state_changed',\r\n            snapshot => { setProgress(Math.round((snapshot.bytesTransferred / snapshot.totalBytes) * 100)) },//progress bar\r\n            err => { //show if error\r\n                console.log('upload error: ', err)\r\n                setProgress(0)\r\n                // set progress bar invisibile\r\n                setShowProgress(prevState => {\r\n                    let helpArray = [...prevState]\r\n                    helpArray[index] = false\r\n                    return helpArray\r\n                })\r\n            },\r\n            () => {\r\n                storage // get url\r\n                    .ref(`images/${localStorage.getItem(IS_AUTH)}/${id}`)\r\n                    .child(`${index}`)\r\n                    .getDownloadURL() // get url\r\n                    .then(url => {\r\n\r\n                        // write url in state, index - 1 is for smallImageURL\r\n                        if (index !== -1) {\r\n                            setImageURL(prevState => {\r\n                                let helpArray = [...prevState]\r\n                                helpArray[index] = url\r\n                                return helpArray\r\n                            })\r\n                        } else {\r\n                            setSmallImageURL(url)\r\n                        }\r\n\r\n                        setProgress(0)\r\n                        // set progress bar invisibile\r\n                        setShowProgress(prevState => {\r\n                            let helpArray = [...prevState]\r\n                            helpArray[index] = false\r\n                            return helpArray\r\n                        })\r\n                    })\r\n\r\n                    .catch(errStorage => {\r\n                        console.log('storage errStorage', errStorage);\r\n                        setProgress(0)\r\n                        // set progress bar invisibile\r\n                        setShowProgress(prevState => {\r\n                            let helpArray = [...prevState]\r\n                            helpArray[index] = false\r\n                            return helpArray\r\n                        })\r\n                    })\r\n            })\r\n    }\r\n\r\n    // add item to DB\r\n    const addItemToDB = () => {\r\n\r\n\r\n        // TODO: validations - jesli zostanie dodane jakiekolwiek zdjęcie to pierwsze też musi bo pierwsze jest robione jako miniaturka\r\n\r\n\r\n        // delete null elements from array of URL images\r\n        const imageURLFiltered = imageURL.filter(item => item != null)\r\n\r\n        // object to save in DB\r\n        const corObject = {\r\n\r\n            // data for all ads\r\n            id: id, // unique ID is always the same as document Key in DB, first part of id is collection name, second is adding date, third is time ,fourth is random string\r\n            mainCategory: mainCategory, // main category of ad\r\n            userPhoto: auth.currentUser.photoURL, // user login photo from login social media\r\n            isPromoted: isPromoted, // user set promoted or not\r\n\r\n            /*elements added in backend :\r\n            userId: localStorage.getItem(IS_AUTH), // user Id\r\n            adDate: new Date().getTime(), // date of add or refresh in DB - will be changed after by backend when user want to refresch ad, name in ms from 1970, type: NUMBER\r\n            isApproved: true, // always true when first add ad, can be change by admin only\r\n            isApprovedReason: \"\", // always empty when first add ad, write info if isApproved=false why rejected ad\r\n            */\r\n\r\n            // all ads from form\r\n            typeChosen: typeChosen,\r\n            yearChosen: yearChosen,\r\n            adTitle: adTitle,\r\n            imageURL: imageURLFiltered, // all images URL in array\r\n            smallImageURL: smallImageURL, // small image to show only in list of ads \r\n            inputDescription: inputDescription,\r\n            techKnowledge: techKnowledge,\r\n            priceOfMeeting: priceOfMeeting,\r\n            timeOfDay: timeOfDay,\r\n            regionChosen: regionChosen,\r\n            cityChosen: cityChosen,\r\n            inputName: inputName,\r\n            inputEmail: inputEmail,\r\n            inputPhone: inputPhone,\r\n            inputAgreenent: inputAgreenent,\r\n\r\n            // only car category from form\r\n            carIdChosen: carIdChosen,\r\n            carModelChosen: carModelChosen,\r\n            fuelChosen: fuelChosen,\r\n            gearboxChosen: gearboxChosen,\r\n            mileageChosen: mileageChosen,\r\n            capacityChosen: capacityChosen,\r\n            powerChosen: powerChosen,\r\n            equipmentChosen: equipmentChosen,\r\n\r\n        }\r\n        console.log(corObject);\r\n\r\n        // create obj in DB - call backend\r\n        const createAd = functions.httpsCallable('createAd')\r\n        createAd({ item: corObject })\r\n            .then(resp => {\r\n\r\n                // show alert\r\n                setIsAlertSmallShow({ alertIcon: 'OK', description: 'Ogłoszenie dodane.', animationTime: '2', borderColor: 'green' })\r\n                console.log(\"DB response: \", resp.data)\r\n            })\r\n            .catch(err => {\r\n\r\n                // show alert\r\n                setIsAlertSmallShow({ alertIcon: 'error', description: 'Błąd. Spróbuj ponownie później.', animationTime: '2', borderColor: 'red' })\r\n                console.log(err)\r\n            })\r\n\r\n        // clear all data from form\r\n        clearAllDataFromFormAndClose()\r\n\r\n        // generate new unique id of ad\r\n        idGenerator()\r\n\r\n    }\r\n\r\n    // ----------------------- STOP ADD ITEM --------------------------//\r\n\r\n\r\n\r\n    return (\r\n\r\n        localStorage.getItem(IS_AUTH)\r\n\r\n            // user Log In\r\n            ? <section className={style.background}>\r\n\r\n                {/* AlertSmall */}\r\n                {isAlertSmallShow && <AlertSmall alertIcon={isAlertSmallShow.alertIcon} description={isAlertSmallShow.description} animationTime={isAlertSmallShow.animationTime} borderColor={isAlertSmallShow.borderColor} hide={() => setIsAlertSmallShow(false)} />}\r\n\r\n                <div className={style.container}>\r\n\r\n                    {!isAddingItem\r\n\r\n                        // USER LIST ITEMS\r\n                        ? <div className={style.user}>\r\n                            <p className={style.user__title}>Witaj {localStorage.getItem(USER_NAME)}</p>\r\n                            <p className={style.user__itemsDesc}>Twoje ogłoszenia:</p>\r\n                            <div className={style.user__itemsContainer}>\r\n\r\n                                {userAds.map(item => {\r\n                                    return (\r\n                                        <div key={item.id} className={style.user__item}>\r\n\r\n                                            <figure className={style.user__itemFigure}>\r\n                                                <img className={style.user__itemImg} src={item.smallImageURL || PhotoEmpty} alt=\"main ad\" />\r\n                                            </figure>\r\n\r\n                                            <div className={style.user__itemDescContainer}>\r\n                                                <div className={style.user__itemDescTop}>\r\n                                                    <p className={style.user__itemText}>{item.adTitle}</p>\r\n                                                </div>\r\n\r\n                                                <div className={style.user__itemDescTop}>\r\n                                                    <div className={style.user__itemDescTopLeft}>\r\n                                                        <p className={style.user__itemText}>{mainCategories.find(i => i.nameDB === item.mainCategory).name}:</p>\r\n\r\n                                                        {item.carIdChosen\r\n                                                            ? <div className={style.flexRow}>\r\n                                                                <p className={style.user__itemText}>{mainCategories[0].carBrands.find(i => i.id === item.carIdChosen).name}</p>\r\n                                                                <p className={style.user__itemText}>{item.carModelChosen}</p>\r\n                                                            </div>\r\n                                                            : <p className={style.user__itemText}>{item.typeChosen}</p>\r\n                                                        }\r\n\r\n                                                    </div>\r\n                                                    <div className={style.user__itemDescTopRight} >\r\n                                                        <p className={style.user__itemText}>{item.priceOfMeeting} zł/h</p>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                {item.isApproved\r\n                                                    ? <p className={style.user__itemDescMiddleText} style={{ color: \"green\" }}>Zaakceptowane</p>\r\n                                                    : <p className={style.user__itemDescMiddleText} style={{ color: \"red\" }}>{`Oczekiwanie na akceptację: ${item.isApprovedReason}`}</p>}\r\n\r\n                                                {new Date().getTime() <= item.adDate\r\n                                                    ? <p className={style.user__itemDescMiddleText} style={{ color: \"green\" }}>Ważność ogłoszenia: {dayTextConverter(item.adDate)} </p>\r\n\r\n                                                    : <div className={style.user__itemDescBottom}>\r\n                                                        <p className={style.user__itemDescMiddleText} style={{ color: \"red\" }}>Ogłoszenie nieważne</p>\r\n                                                        <button className={style.user__itemButton} onClick={e => refreshItemFromDB(e, item)}>przedłuż ważność</button>\r\n                                                    </div>}\r\n\r\n                                                {item.isPromoted && <p className={style.user__itemDescMiddleText} style={{ color: \"blue\" }}>Promowane</p>}\r\n\r\n                                                <div className={style.user__itemDescBottom}>\r\n                                                    <a className={style.user__itemButton} href={`/home/${item.id}`}>zobacz</a>\r\n                                                    <button className={style.user__itemButton} onClick={e => editItemFromDB(e, item)}>edytuj</button>\r\n                                                    <button className={style.user__itemButton} onClick={e => deleteItemFromDB(e, item)}>usuń</button>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                                }\r\n                                <div className={style.user__itemAdSVG} onClick={showForm}>\r\n                                    <Ad />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        // AD ITEM\r\n                        : <div className={style.ad}>\r\n\r\n                            {/* main category section */}\r\n                            <div className={style.ad__section}>\r\n                                <p className={style.ad__title}>Kategorie:</p>\r\n                                <div className={style.ad__container}>\r\n                                    {mainCategories.map(item => {\r\n                                        return (\r\n                                            <div key={item.nameDB} className={`${style.add__categoriesItemContainer} ${(mainCategory === item.nameDB) && style.add__categoriesItemContainerActive}`} onClick={() => mainCategoryHandler(item.nameDB)}>\r\n                                                <figure className={style.add__categoriesItemFigure}>\r\n                                                    <img className={style.add__categoriesItemImg} src={item.photo} alt=\"main\" />\r\n                                                </figure>\r\n                                                <p className={style.add__categoriesItemDesc}>{item.name}</p>\r\n                                            </div>\r\n                                        )\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* car section */}\r\n                            <div className={style.ad__section}>\r\n                                <p className={style.ad__title}>Dane:</p>\r\n\r\n                                <div className={style.ad__container}>\r\n\r\n                                    {(mainCategory === mainCategories[0].nameDB)\r\n                                        && <div className={style.ad__itemContainer}>\r\n                                            <p className={style.ad__itemDesc}>Marka:</p>\r\n                                            <select className={style.ad__itemList} onChange={setCarIdChosenChandler}>\r\n                                                {mainCategories[0].carBrands.map(item => <option key={item.id} value={item.id}>{item.name}</option>)}\r\n                                            </select>\r\n                                        </div>}\r\n\r\n                                    {(mainCategory === mainCategories[0].nameDB)\r\n                                        && <div className={style.ad__itemContainer}>\r\n                                            <p className={style.ad__itemDesc}>Model:</p>\r\n                                            <select className={style.ad__itemList} onChange={e => setCarModelChosen(e.target.value)}>\r\n                                                {mainCategories[0].carBrands.find(item => item.id === carIdChosen).models.map(item => <option key={item} value={item}>{item}</option>)}\r\n                                            </select>\r\n                                        </div>}\r\n\r\n                                    {(mainCategory === mainCategories[0].nameDB)\r\n                                        && <div className={style.ad__itemContainer}>\r\n                                            <p className={style.ad__itemDesc}>Paliwo:</p>\r\n                                            <select className={style.ad__itemList} onChange={e => setFuelChosen(e.target.value)}>\r\n                                                {fuel.map(item => <option key={item} value={item}>{item}</option>)}\r\n                                            </select>\r\n                                        </div>}\r\n\r\n                                    {(mainCategory === mainCategories[0].nameDB)\r\n                                        && <div className={style.ad__itemContainer}>\r\n                                            <p className={style.ad__itemDesc}>Skrzynia biegów:</p>\r\n                                            <select className={style.ad__itemList} onChange={e => setGearboxChosen(e.target.value)}>\r\n                                                {gearbox.map(item => <option key={item} value={item}>{item}</option>)}\r\n                                            </select>\r\n                                        </div>}\r\n\r\n                                    {(mainCategory === mainCategories[0].nameDB)\r\n                                        && <div className={style.ad__itemContainer}>\r\n                                            <p className={style.ad__itemDesc}>Przebieg (tyś km.):</p>\r\n                                            <select className={style.ad__itemList} onChange={e => setMileageChosen(e.target.value)}>\r\n                                                {mileage.map(item => <option key={item} value={item}>{item}</option>)}\r\n                                            </select>\r\n                                        </div>}\r\n\r\n                                    {(mainCategory === mainCategories[0].nameDB)\r\n                                        && <div className={style.ad__itemContainer}>\r\n                                            <label className={style.ad__itemDesc}>Pojemność (cm3):</label>\r\n                                            <input onChange={event => setCapacityChosen(event.target.value)} value={capacityChosen} className={style.ad__itemList} type='number' />\r\n                                        </div>}\r\n\r\n                                    {(mainCategory === mainCategories[0].nameDB)\r\n                                        && <div className={style.ad__itemContainer}>\r\n                                            <label className={style.ad__itemDesc}>Moc (KM):</label>\r\n                                            <input onChange={event => setPowerChosen(event.target.value)} value={powerChosen} className={style.ad__itemList} type='number' />\r\n                                        </div>}\r\n\r\n                                    <div className={style.ad__itemContainer}>\r\n                                        <p className={style.ad__itemDesc}>Typ:</p>\r\n                                        <select className={style.ad__itemList} onChange={e => setTypeChosen(e.target.value)}>\r\n                                            {mainCategories.find(i => mainCategory === i.nameDB).type.map(item => <option key={item} value={item}>{item}</option>)}\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <div className={style.ad__itemContainer}>\r\n                                        <p className={style.ad__itemDesc}>Rok produkcji:</p>\r\n                                        <select className={style.ad__itemList} onChange={e => setYearChosen(e.target.value)}>\r\n                                            {years.map(item => <option key={item} value={item}>{item}</option>)}\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                {(mainCategory === mainCategories[0].nameDB)\r\n                                    && <div className={style.ad__container}>\r\n                                        <fieldset className={style.ad__containerEquipment}>\r\n                                            <legend className={style.ad__legendEquipment}>Wyposarzenie: </legend>\r\n\r\n                                            {carEquipment.map(item => {\r\n                                                return (\r\n                                                    <div key={item.id} className={style.ad_checkBoxContainerEquipment}>\r\n                                                        <input name={item.id} onChange={event => equipmentOnChangeHandler((event.target.name), (event.target.checked ? true : false))} className={style.ad__inputCheckBoxEquipment} type='checkbox' />\r\n                                                        <label className={style.ad__labelCheckBoxEquipment}>{item.name}</label>\r\n                                                    </div>\r\n                                                )\r\n                                            })}\r\n\r\n                                        </fieldset>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n\r\n                            {/* photo and description section */}\r\n                            <div className={style.ad__section}>\r\n\r\n                                <p className={style.ad__title}>Opis:</p>\r\n                                <div className={style.ad__container}>\r\n\r\n                                    <div className={`${style.ad__itemContainer} ${style.ad__itemContainerWide}`}>\r\n                                        <label className={style.ad__itemDesc}>Tytuł ogłoszenia (10-50 znaków):</label>\r\n                                        <input onChange={event => setAdTitle(event.target.value)} value={adTitle} className={style.ad__itemList} type='text' />\r\n                                    </div>\r\n\r\n\r\n                                    <div className={style.ad__containerPhotos}>\r\n                                        <p className={style.ad__itemContainer}>Zdjęcia:</p>\r\n                                        <div className={style.ad__containerPhotos}>\r\n\r\n\r\n                                            {[...Array(4)].map((item, index) => {\r\n                                                return (\r\n                                                    <div key={index} className={style.ad__itemContainer}>\r\n                                                        <input\r\n                                                            id={`file${index}`}\r\n                                                            // className=\"\"\r\n                                                            style={{ display: \"none\" }}\r\n                                                            type='file'\r\n                                                            onChange={(e) => getPhoto(e, index)}\r\n                                                            accept='image/*' //image/* = .jpg, .jpeg, .bmp, .svg, .png\r\n                                                        />\r\n                                                        <label htmlFor={`file${index}`} className={` ${style.btn} ${style.ad__itemLabel}`}><img className={style.ad__itemImage} src={imageURL[index] || Photo} alt='podgląd zdjęcia.' /> </label>\r\n                                                        {showProgress[index] &&\r\n                                                            <div className={style.ad__progressContainer}>\r\n                                                                <progress className={style.ad__progressBar} value={progress} max='100' />\r\n                                                            </div>}\r\n                                                    </div>\r\n                                                )\r\n                                            })}\r\n                                        </div>\r\n                                    </div>\r\n\r\n\r\n                                    <div className={`${style.ad__itemContainer} ${style.ad__itemTextArea}`}>\r\n                                        <label className={style.ad__itemDesc}>Opis (50-500 znaków):</label>\r\n                                        <textarea onChange={event => setInputDescription(event.target.value)} value={inputDescription} className={style.ad__itemList} type='textarea' rows='8' placeholder=\"Opisz szerzej przedmiot, chcesz zaprezentować.\" />\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            {/* meeting data section */}\r\n                            <div className={style.ad__section}>\r\n                                <p className={style.ad__title}>Informacje o spotkaniu:</p>\r\n                                <div className={style.ad__container}>\r\n\r\n                                    <div className={style.ad__itemContainer}>\r\n                                        <p className={style.ad__itemDesc}>Jak oceniasz swoją wiedzę techniczną.</p>\r\n                                        <select className={style.ad__itemList} onChange={e => setTechKnowledge(e.target.value)}>\r\n                                            {knowledge.map(item => <option key={item} value={item}> {item} </option>)}\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <div className={style.ad__itemContainer}>\r\n                                        <label className={style.ad__itemDesc}>Jaka jest cena za godzinne spotkanie?</label>\r\n                                        <input onChange={event => setPriceOfMeeting(event.target.value)} value={priceOfMeeting} className={style.ad__itemList} type='number' placeholder=\"np. 150\" />\r\n                                    </div>\r\n\r\n                                    <div className={style.ad__itemContainer}>\r\n                                        <label className={style.ad__itemDesc}>Opisz preferowaną pore spotkania:</label>\r\n                                        <input onChange={event => setTimeOfDay(event.target.value)} value={timeOfDay} className={style.ad__itemList} type='text' placeholder=\"np. każda sobota i niedziela\" />\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            {/* contact data section */}\r\n                            <div className={style.ad__section}>\r\n                                <p className={style.ad__title}>Twoje dane kontaktowe:</p>\r\n                                <div className={style.ad__container}>\r\n\r\n                                    <div className={style.ad__itemContainer}>\r\n                                        <p className={style.ad__itemDesc}>Województwo:</p>\r\n                                        <select className={style.ad__itemList} onChange={setRegionChosenChandler}>\r\n                                            {regions.map(item => <option key={item} value={item}> {item} </option>)}\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <div className={style.ad__itemContainer}>\r\n                                        <p className={style.ad__itemDesc}>Miasto:</p>\r\n                                        <select className={style.ad__itemList} onChange={e => setCityChosen(e.target.value)}>\r\n                                            {cities.filter(item => item.region === regionChosen).map(item => <option key={item.city} value={item.city}> {item.city} </option>)}\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <div className={style.ad__itemContainer}>\r\n                                        <label className={style.ad__itemDesc}>Imię:</label>\r\n                                        <input onChange={event => setInputName(event.target.value)} value={inputName} className={style.ad__itemList} type='text' placeholder=\"np. Jan\" />\r\n                                    </div>\r\n\r\n                                    <div className={style.ad__itemContainer}>\r\n                                        <label className={style.ad__itemDesc}>Adres e-mail (opcjonalnie):</label>\r\n                                        <input onChange={event => setInputEmail(event.target.value)} value={inputEmail} className={style.ad__itemList} type='text' placeholder=\"np. jan@gmail.com\" />\r\n                                    </div>\r\n\r\n                                    <div className={style.ad__itemContainer}>\r\n                                        <label className={style.ad__itemDesc}>Numer telefonu (wymagane):</label>\r\n                                        <input onChange={event => setInputPhone(event.target.value)} value={inputPhone} className={style.ad__itemList} type='phone' placeholder=\"np. 100-200-300\" maxLength=\"11\" />\r\n                                    </div>\r\n\r\n                                    <div className={style.ad_checkBoxContainer}>\r\n                                        <input onChange={event => setIsPromoted(event.target.checked ? true : false)} className={style.ad__inputCheckBox} type='checkbox' />\r\n                                        <label className={style.ad__labelCheckBox}><b>Kup promowanie ogłoszenia. Koszt 1zł.</b></label>\r\n                                    </div>\r\n\r\n                                    <div className={style.ad_checkBoxContainer}>\r\n                                        <input onChange={event => setAgreenent(event.target.checked ? true : false)} className={style.ad__inputCheckBox} type='checkbox' />\r\n                                        <label className={style.ad__labelCheckBox}>Zapoznałem się i akceptuję <a href=\"/privacy-policy\">regulamin serwisu</a> oraz <a href=\"/privacy-policy\">politykę prywatności</a>.</label>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            <div className={style.btnContainer}>\r\n                                <button className={`${style.btn} ${style.btnMmargin}`} onClick={cancelForm}>Anuluj</button>\r\n                                <button className={style.btn} onClick={addItemToDB}>Dodaj</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    }\r\n\r\n\r\n                </div>\r\n            </section >\r\n\r\n            // user log out\r\n            : <LoginRegisterFirebaseUI />\r\n    )\r\n}\r\n\r\nexport default User\r\n","D:\\JS\\_projects\\jatestuje\\src\\components\\User\\LoginRegisterFirebaseUI\\LoginRegisterFirebaseUI.js",[],"D:\\JS\\_projects\\jatestuje\\src\\shared\\data.js",[],"D:\\JS\\_projects\\jatestuje\\src\\components\\Ad\\Ad.js",[],"D:\\JS\\_projects\\jatestuje\\src\\components\\UserAds\\UserAds.js",[],"D:\\JS\\_projects\\jatestuje\\src\\components\\Contact\\Contact.js",[],"D:\\JS\\_projects\\jatestuje\\src\\components\\Regulations\\Regulations.js",[],"D:\\JS\\_projects\\jatestuje\\src\\components\\ListItemAd\\ListItemAd.js",[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":120,"column":8,"nodeType":"99","endLine":120,"endColumn":22,"suggestions":"100"},{"ruleId":"97","severity":1,"message":"101","line":356,"column":8,"nodeType":"99","endLine":356,"endColumn":22,"suggestions":"102"},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'queryToDB'. Either include it or remove the dependency array.","ArrayExpression",["105"],"React Hook useEffect has a missing dependency: 'idGenerator'. Either include it or remove the dependency array.",["106"],"no-global-assign","no-unsafe-negation",{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},"Update the dependencies array to be: [mainCategory, queryToDB]",{"range":"111","text":"112"},"Update the dependencies array to be: [idGenerator, mainCategory]",{"range":"113","text":"114"},[2991,3005],"[mainCategory, queryToDB]",[11430,11444],"[idGenerator, mainCategory]"]